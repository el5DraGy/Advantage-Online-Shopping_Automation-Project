The following is a digest of the repository "AdvantageOnlineShopping-AutomationProject".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: AdvantageOnlineShopping-AutomationProject
Files Analyzed: 73
Total Text Size: 193.46 KB
Estimated Tokens (text only): ~45,698

--- DIRECTORY STRUCTURE ---
AdvantageOnlineShopping-AutomationProject/
├── .allure/
│   └── allure-2.29.0/
│       ├── config/
│       │   ├── allure-cucumber.yml
│       │   ├── allure-junit.yml
│       │   └── allure.yml
│       └── plugins/
│           ├── behaviors-plugin/
│           │   └── allure-plugin.yml
│           ├── custom-logo-plugin/
│           │   └── allure-plugin.yml
│           ├── jira-plugin/
│           │   └── allure-plugin.yml
│           ├── junit-xml-plugin/
│           │   └── allure-plugin.yml
│           ├── packages-plugin/
│           │   └── allure-plugin.yml
│           ├── screen-diff-plugin/
│           │   └── allure-plugin.yml
│           ├── trx-plugin/
│           │   └── allure-plugin.yml
│           ├── xctest-plugin/
│           │   └── allure-plugin.yml
│           ├── xray-plugin/
│           │   └── allure-plugin.yml
│           ├── xunit-xml-plugin/
│           │   └── allure-plugin.yml
│           └── README.txt
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   ├── DriverFactory/
│   │   │   │   └── DriverFactory.java
│   │   │   ├── Pages/
│   │   │   │   ├── P01_LogInPage.java
│   │   │   │   ├── P02_HomePage.java
│   │   │   │   ├── P03_LaptopsPage.java
│   │   │   │   ├── P04_HeadphonesPage.java
│   │   │   │   ├── P05_TabletsPage.java
│   │   │   │   ├── P06_SpeakersPage.java
│   │   │   │   ├── P07_MicePage.java
│   │   │   │   ├── P08_ProductSpecificationsPage.java
│   │   │   │   ├── P09_ShoppingCartPage.java
│   │   │   │   ├── P10_ShippingDetailsPage.java
│   │   │   │   ├── P11_PaymentMethodsPage.java
│   │   │   │   ├── P12_OrderSummaryPage.java
│   │   │   │   ├── page_source.txt
│   │   │   │   ├── pagesName.txt
│   │   │   │   └── TestName.txt
│   │   │   └── Utilities/
│   │   │       ├── DataUtils.java
│   │   │       ├── LogsUtils.java
│   │   │       └── Utility.java
│   │   └── resources/
│   │       ├── allure.properties
│   │       └── log4j2.properties
│   └── test/
│       ├── java/
│       │   ├── Listeners/
│       │   │   ├── IInvokedListenersClass.java
│       │   │   └── ITestListenersClass.java
│       │   └── Tests/
│       │       ├── TC01_LogInTest.java
│       │       ├── TC02_HomeTest.java
│       │       ├── TC03_LaptopsTest.java
│       │       ├── TC04_HeadphonesTest.java
│       │       ├── TC05_TabletsTest.java
│       │       ├── TC06_SpeakersTest.java
│       │       ├── TC07_MiceTest.java
│       │       ├── TC08_ProductSpecificationsTest.java
│       │       ├── TC09_ShoppingCartTest.java
│       │       ├── TC10_ShippingDetailsTest.java
│       │       ├── TC11_PaymentMethodsTest.java
│       │       └── TC12_OrderSummaryTest.java
│       └── resources/
│           └── TestData/
│               ├── ContactUsData.json
│               ├── environment.properties
│               ├── PaymentData.json
│               ├── ProductsLinks.properties
│               ├── validLogin.json
│               └── validRegister.json
├── Test Runner/
│   ├── HeadphonesSuite.xml
│   ├── HomeSuite.xml
│   ├── LaptopsSuite.xml
│   ├── LogInSuite.xml
│   ├── MicesSuite.xml
│   ├── OrderSummarySuite.xml
│   ├── PaymentMethodsSuite.xml
│   ├── ProductSpecificationsSuite.xml
│   ├── RegressionSuite.xml
│   ├── ShippingDetailsSuite.xml
│   ├── ShoppingCartSuite.xml
│   ├── SpeakersSuite.xml
│   └── TabletsSuite.xml
├── Test-outputs/
│   └── ScreenShots/
│       ├── -2025-08-11-1-26-28PMverifyEndToEndScenario.png [binary]
│       └── -2025-08-11-3-53-39PMcheckGoUpIconAndContinueShoppingButton.png [binary]
├── pages_tree.txt
├── pom.xml
└── test_tree.txt


--- FILE CONTENTS ---
============================================================
FILE: .allure/allure-2.29.0/config/allure-junit.yml
============================================================
plugins:
  - junit-plugin
  - packages-plugin


============================================================
FILE: .allure/allure-2.29.0/config/allure.yml
============================================================
plugins:
  - junit-xml-plugin
  - xunit-xml-plugin
  - trx-plugin
  - behaviors-plugin
  - packages-plugin
  - screen-diff-plugin
  - xctest-plugin
  - jira-plugin
  - xray-plugin


============================================================
FILE: .allure/allure-2.29.0/plugins/behaviors-plugin/allure-plugin.yml
============================================================
id: behaviors
name: Behaviors aggregator
description: The aggregator adds behaviors tab to the report
extensions:
  - io.qameta.allure.behaviors.BehaviorsPlugin
jsFiles:
  - index.js

============================================================
FILE: .allure/allure-2.29.0/plugins/custom-logo-plugin/allure-plugin.yml
============================================================
id: custom-logo
name: Custom logo aggregator
description: The aggregator replaces default Allure logo with a custom one
cssFiles:
  - styles.css

============================================================
FILE: .allure/allure-2.29.0/plugins/jira-plugin/allure-plugin.yml
============================================================
id: jira
name: Jira Plugin
description: The plugin that adds support for Jira integration.
extensions:
  - io.qameta.allure.jira.JiraExportPlugin


============================================================
FILE: .allure/allure-2.29.0/plugins/junit-xml-plugin/allure-plugin.yml
============================================================
id: junit
name: JUnit Plugin
description: The plugin that adds support for results in JUnit.xml data format.
extensions:
  - io.qameta.allure.junitxml.JunitXmlPlugin

============================================================
FILE: .allure/allure-2.29.0/plugins/packages-plugin/allure-plugin.yml
============================================================
id: packages
name: Packages aggregator
description: The aggregator adds packages tab to the report
extensions:
  - io.qameta.allure.packages.PackagesPlugin
jsFiles:
  - index.js

============================================================
FILE: .allure/allure-2.29.0/plugins/screen-diff-plugin/allure-plugin.yml
============================================================
id: screen-diff
name: Screen diff
description: Who cares about description by just-boris
jsFiles:
  - index.js
cssFiles:
  - styles.css

============================================================
FILE: .allure/allure-2.29.0/plugins/trx-plugin/allure-plugin.yml
============================================================
id: trx
name: XUnit TRX Plugin
description: The plugin that adds support for results TRX data format.
extensions:
  - io.qameta.allure.trx.TrxPlugin

============================================================
FILE: .allure/allure-2.29.0/plugins/xctest-plugin/allure-plugin.yml
============================================================
id: xctest
name: XCTest Plugin
description: The plugin that adds support for results XCTest data format.
extensions:
  - io.qameta.allure.xctest.XcTestPlugin

============================================================
FILE: .allure/allure-2.29.0/plugins/xray-plugin/allure-plugin.yml
============================================================
id: xray
name: Xray Plugin
description: The plugin that adds support for Xray integration.
extensions:
  - io.qameta.allure.xray.XrayTestRunExportPlugin


============================================================
FILE: .allure/allure-2.29.0/plugins/xunit-xml-plugin/allure-plugin.yml
============================================================
id: xunit-xml
name: XUnit XML v2 Plugin
description: The plugin that adds support for results in Xunit.net xml data format.
extensions:
  - io.qameta.allure.xunitxml.XunitXmlPlugin

============================================================
FILE: .allure/allure-2.29.0/plugins/README.txt
============================================================
The directory with Allure plugins. To add the plugin simply unpack it to this folder.

============================================================
FILE: src/main/java/DriverFactory/DriverFactory.java
============================================================
package DriverFactory;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;

public class DriverFactory {
    private static final ThreadLocal<WebDriver> driverThreadLocal = new ThreadLocal<>();

    public static void setUpDriver(String browser) {
        switch (browser.toLowerCase()) {
            case "chrome":
                ChromeOptions chromeOptions = new ChromeOptions();
                chromeOptions.addArguments("--start-maximized");
                driverThreadLocal.set(new ChromeDriver(chromeOptions));
                break;
            case "firefox":
                FirefoxOptions firefoxOptions = new FirefoxOptions();
                firefoxOptions.addArguments("--start-maximized");
                driverThreadLocal.set(new FirefoxDriver(firefoxOptions));
                break;
            default:
                EdgeOptions edgeOptions = new EdgeOptions();
                edgeOptions.addArguments("--start-maximized");
                driverThreadLocal.set(new EdgeDriver(edgeOptions));
                break;
        }

    }

    public static WebDriver getDriver() {
        return driverThreadLocal.get();
    }

    public static void quitDriver() {
        getDriver().quit();
        driverThreadLocal.remove();
    }

}


============================================================
FILE: src/main/java/Pages/P01_LogInPage.java
============================================================
package Pages;

import Utilities.Utility;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import static Utilities.Utility.*;


public class P01_LogInPage {
    private final WebDriver driver;

    private final By UserMenu = By.id("menuUserLink");
    private final By username = By.xpath("//input[@name='username']");
    private final By password = By.xpath("//input[@name='password']");
    private final By signInButton = By.id("sign_in_btn");


    public P01_LogInPage(WebDriver driver) {
        this.driver = driver;
    }

    public P01_LogInPage clickOnUserMenu() {
        clickOnElement(driver, UserMenu);
        return this;
    }
    public P01_LogInPage sendUserName(String usernameValue) {
        sendData(driver, username, usernameValue);
        return this;
    }

    public P01_LogInPage sendPassword(String passWordValue) {
        sendData(driver, password, passWordValue);
        return this;
    }

    public P02_HomePage signInButtonClick() {
        clickOnElement(driver, signInButton);
        return new P02_HomePage(driver);
    }








}


============================================================
FILE: src/main/java/Pages/P02_HomePage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;

import static Utilities.Utility.*;

public class P02_HomePage {
    private final WebDriver driver;
    //TODO: Add locators for the home page elements
    private final By HomeLogo = By.className("logo");
    private final By ShoppingCart = By.id("shoppingCartLink");
    private final By UserMenu = By.id("menuUserLink");
    //private final By searchBox = By.id("autoComplete");
    private final By searchIcon = By.id("menuSearch");
    private final By searchBar = By.id("autoComplete");
    private final By searchResultLabel = By.id("searchResultLabel");
    //TODO: Add more locators for the home page Products as needed
    private final By SpeakersCategory = By.id("speakersImg");
    private final By TabletsCategory = By.id("tabletsImg");
    private final By HeadphonesCategory = By.id("headphonesImg");
    private final By MiceCategory = By.id("miceImg");
    private final By LaptopsCategory = By.id("laptopsImg");
    private final By seeOfferButton = By.id("see_offer_btn");
    private final By exploreNowButton = By.xpath("//button[@name='explore_now_btn']");
    //TODO: Add more locators for the POPULAR ITEMS Products
    private final By popularItem1 = By.id("details_16");
    private final By popularItem2 = By.id("details_10");
    private final By popularItem3 = By.id("details_21");
    //TODO: Add more locators for CONTACT US
    private final By categoryListBoxContactUs = By.xpath("//select[@name='categoryListboxContactUs']");
    private final By productListBoxContactUs = By.xpath("//select[@name='productListboxContactUs']");
    private final By emailContactUs = By.xpath("//input[@name='emailContactUs']");
    private final By subjectTextareaContactUs = By.xpath("//textarea[@name='subjectTextareaContactUs']");
    private final By ContactUsSendButton = By.id("send_btn");
    private final By continueShoppingButton = By.xpath("//a[normalize-space()='CONTINUE SHOPPING']");
    private final By ContactUsSuccessMessage = By.xpath("//div[@id='registerSuccessCover']//div[@class='center']");
    private final By goUpButton = By.xpath("//img[@name='go_up_btn']");
    //TODO: Add more locators for the page footer as needed
    private final By facebookLink = By.cssSelector("a[href*='facebook.com']");
    private final By twitterLink = By.cssSelector("a[href*='twitter.com']");
    private final By linkedinLink = By.cssSelector("a[href*='linkedin.com']");


    public P02_HomePage(WebDriver driver) {
        this.driver = driver;
    }


    //TODO: Clicks on the popular item 1
    public P08_ProductSpecificationsPage clickOnPopularItem1() {
        clickOnElement(driver, popularItem1);
        return new P08_ProductSpecificationsPage(driver);
    }

    //TODO: Clicks on the popular item 2
    public P08_ProductSpecificationsPage clickOnPopularItem2() {
        clickOnElement(driver, popularItem2);
        return new P08_ProductSpecificationsPage(driver);
    }

    //TODO: Clicks on the popular item 3
    public P08_ProductSpecificationsPage clickOnPopularItem3() {
        clickOnElement(driver, popularItem3);
        return new P08_ProductSpecificationsPage(driver);
    }







    //TODO: select category ListBox in the Contact Us page
    public P02_HomePage selectCategoryListBoxContactUs(String category) {
        dropDownSelect(driver, categoryListBoxContactUs, category);
        return this;
    }

    //TODO : Select Product ListBox in the Contact Us page
    public P02_HomePage selectProductListBoxContactUs(String product) {
        dropDownSelect(driver, productListBoxContactUs, product);
        return this;
    }
    //TODO : send Email in the Contact Us page
    public P02_HomePage sendEmailContactUs(String email) {
        sendData(driver, emailContactUs, email);
        return this;
    }

    //TODO : send Subject in the Contact Us page
    public P02_HomePage sendSubjectTextareaContactUs(String subject) {
        sendData(driver, subjectTextareaContactUs, subject);
        return this;
    }

    //TODO : Clicks on the Send button in the Contact Us page
    public P02_HomePage clickOnContactUsSendButton() {
        clickOnElement(driver, ContactUsSendButton);
        return this;
    }

    //TODO : Clicks on the Continue Shopping button in the Contact Us page
    public P02_HomePage clickOnContinueShoppingButton() {
        clickOnElement(driver, continueShoppingButton);
        return this;
    }

    //TODO : Clicks on the Go up button in the Home page
    public P02_HomePage clickOngoUpIcon() {
        clickOnElement(driver, goUpButton);
        return this;
    }




    //TODO: Clicks on the home logo element
    public P02_HomePage clickOnHomeLogo() {
        clickOnElement(driver, HomeLogo);
        return this;
    }
    //TODO: Clicks on the shopping cart link
    public P09_ShoppingCartPage clickOnShoppingCart() {
        clickOnElement(driver, ShoppingCart);
        return new P09_ShoppingCartPage(driver);
    }
    //TODO: Clicks on the user menu link
    public P02_HomePage clickOnUserMenu() {
        clickOnElement(driver, UserMenu);
        return this;
    }

    //TODO: Clicks on the search icon
    public P02_HomePage clickOnSearchIcon() {
        clickOnElement(driver, searchIcon);
        return this;
    }
    //TODO: Sends text to the search bar
    public P02_HomePage enterDataToSearchBar(String searchText ) {
        sendData(driver, searchBar, searchText);
        pressEnter(driver, searchBar);
        return this;
    }






    //TODO: Clicks on the laptops category and navigates to laptops page
    public P03_LaptopsPage clickOnLaptopsCategory() {
        clickOnElement(driver, LaptopsCategory);
        return new P03_LaptopsPage(driver);
    }

    //TODO: Clicks on the headphones category and navigates to headphones page
    public P04_HeadphonesPage clickOnHeadphonesCategory() {
        clickOnElement(driver, HeadphonesCategory);
        return new  P04_HeadphonesPage(driver);
    }

    //TODO: Clicks on the tablets category and navigates to tablets page
    public P05_TabletsPage clickOnTabletsCategory() {
        clickOnElement(driver, TabletsCategory);
        return new P05_TabletsPage(driver);
    }

    //TODO: Clicks on the speakers category and navigates to speakers page
    public P06_SpeakersPage clickOnSpeakersCategory() {
        clickOnElement(driver, SpeakersCategory);
        return new P06_SpeakersPage(driver);
    }

    //TODO: Clicks on the mice category and navigates to mice page
    public P07_MicePage clickOnMiceCategory() {
        clickOnElement(driver, MiceCategory);
        return new P07_MicePage(driver);
    }

    //TODO: Clicks on the see offer button
    public P02_HomePage clickOnSeeOfferButton() {
        clickOnElement(driver, seeOfferButton);
        return this;
    }



    //TODO: Checks if the search result label is displayed with the specified text
    public boolean isSearchResultLabelDisplayedWithText(String searchText) {
            return getText(driver, searchResultLabel).contains(searchText);
    }






    // TODO : Clicks on the Facebook footer link and returns its href
    public String clickOnFacebookLink() {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        var element = wait.until(ExpectedConditions.presenceOfElementLocated(facebookLink));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
        try {
            wait.until(ExpectedConditions.elementToBeClickable(element));
            element.click();
        } catch (org.openqa.selenium.ElementNotInteractableException e) {
            ((org.openqa.selenium.JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
        }
        return element.getAttribute("href");
    }

    // TODO : Clicks on the Twitter footer link and returns its href
    public String clickOnTwitterLink() {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        var element = wait.until(ExpectedConditions.presenceOfElementLocated(twitterLink));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
        try {
            wait.until(ExpectedConditions.elementToBeClickable(element));
            element.click();
        } catch (org.openqa.selenium.ElementNotInteractableException e) {
            ((org.openqa.selenium.JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
        }
        return element.getAttribute("href");
    }

    // TODO : Clicks on the LinkedIn footer link and returns its href
    public String clickOnLinkedinLink() {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        var element = wait.until(ExpectedConditions.presenceOfElementLocated(linkedinLink));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
        try {
            wait.until(ExpectedConditions.elementToBeClickable(element));
            element.click();
        } catch (org.openqa.selenium.ElementNotInteractableException e) {
            ((org.openqa.selenium.JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
        }
        return element.getAttribute("href");
    }

    //TODO: Checks if the Facebook link is displayed
    public boolean isFacebookLinkDisplayed() {
        return findWebElement( driver,facebookLink).isDisplayed();
    }

    //TODO: Checks if the Twitter link is displayed
    public boolean isTwitterLinkDisplayed() {
        return findWebElement( driver,twitterLink).isDisplayed();
    }

    //TODO: Checks if the LinkedIn link is displayed
    public boolean isLinkedinLinkDisplayed() {
        return findWebElement( driver,linkedinLink).isDisplayed();
    }

    //TODO: Gets the href attribute of the Facebook link
    public String getFacebookLinkHref() {
        return findWebElement( driver,facebookLink).getAttribute("href");
    }

    //TODO: Gets the href attribute of the Twitter link
    public String getTwitterLinkHref() {
        return findWebElement( driver,twitterLink).getAttribute("href");
    }

    //TODO: Gets the href attribute of the LinkedIn link
    public String getLinkedinLinkHref() {
        return findWebElement( driver,linkedinLink).getAttribute("href");
    }

    public String getPageTitle() {
        return driver.getTitle();
    }
    public String getPageUrl() {
        return driver.getCurrentUrl();
    }

    public boolean isContactUsSuccessMessageDisplayed() {
        return getText(driver, ContactUsSuccessMessage).contains("Thank you for contacting Advantage support.");
    }




    /*
    public P02_HomePage clickOnExploreNowButton() {
        List<WebElement> buttons = driver.findElements(exploreNowButton);
        for (WebElement btn : buttons) {
            if (btn.isDisplayed() && btn.isEnabled()) {
                btn.click();
                break;
            }
        }
        return this;
    }
    public P02_HomePage clickOnExploreNowButton() {
        scroll(driver);
        new WebDriverWait(driver, Duration.ofSeconds(10))
                .until(ExpectedConditions.visibilityOfElementLocated(exploreNowButton));
        clickOnElement(driver, exploreNowButton);
        return this;
    }

     */





}


============================================================
FILE: src/main/java/Pages/P03_LaptopsPage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import java.io.IOException;

import static Utilities.DataUtils.*;
import static Utilities.Utility.*;

public class P03_LaptopsPage {

    private final WebDriver driver;
    private final By newDesignBuyNowButton = By.cssSelector("button[name='buy_now']");
    //TODO: LAPTOPS locators
    private final By HP_Pavilion_15t  = By.xpath("//img[@id='1']");
    private final By HP_Pavilion_15z  = By.xpath("//img[@id='2']");
    private final By HP_Pavilion_15z_Touch  = By.xpath("//img[@id='3']");
    private final By HP_Spectre_x360  = By.xpath("//img[@id='4']");
    private final By HP_Stream_11   = By.xpath("//img[@id='5']");
    private final By HP_ENVY_x360   = By.xpath("//img[@id='6']");
    private final By HP_ENVY_17t  = By.xpath("//img[@id='7']");
    private final By HP_ZBook_17 = By.xpath("//img[@id='8']");
    private final By HP_Chromebook_ENERGYSTAR = By.xpath("//img[@id='9']");
    private final By HP_Chromebook_ES = By.xpath("//img[@id='10']");
    private final By HP_Pavilion_x360_11t_Touch  = By.xpath("//img[@id='11']");

    public P03_LaptopsPage(WebDriver driver) {
        this.driver = driver;
    }
/*
    public P03_LaptopsPage backToLaptopsPage() throws IOException {
        backToPageUsingURL(driver,getPropertyData("environment", "LaptopsCategory"));
        return this;
    }

 */

    public P08_ProductSpecificationsPage clickOnNewDesignBuyNowButton() {
        driver.findElement(newDesignBuyNowButton).click();
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_Pavilion_15t() {
        clickOnElement(driver,HP_Pavilion_15t);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_Pavilion_15z() {
        clickOnElement(driver,HP_Pavilion_15z);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnHP_Pavilion_15z_Touch() {
        clickOnElement(driver,HP_Pavilion_15z_Touch);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnHP_Spectre_x360() {
        clickOnElement(driver,HP_Spectre_x360);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_Stream_11() {
        clickOnElement(driver,HP_Stream_11);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_ENVY_x360() {
        clickOnElement(driver,HP_ENVY_x360);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_ENVY_17t() {
        clickOnElement(driver,HP_ENVY_17t);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_ZBook_17() {
        clickOnElement(driver,HP_ZBook_17);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_Chromebook_ENERGYSTAR() {
        clickOnElement(driver,HP_Chromebook_ENERGYSTAR);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnHP_Chromebook_ES() {
        clickOnElement(driver,HP_Chromebook_ES);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnHP_Pavilion_x360_11t_Touch() {
        clickOnElement(driver, HP_Pavilion_x360_11t_Touch);
        return new P08_ProductSpecificationsPage(driver);
    }
















}


============================================================
FILE: src/main/java/Pages/P04_HeadphonesPage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import static Utilities.Utility.*;

public class P04_HeadphonesPage {
    private final WebDriver driver;

    private final By BuyNowButton = By.cssSelector("button[name='buy_now']");
    private final By HP_H2310_In_ear = By.xpath("//img[@id='12']");
    private final By Bose_SoundLink_Around_ear = By.xpath("//img[@id='13']");
    private final By Logitech_USB_Headset_H390 = By.xpath("//img[@id='14']");
    private final By Beats_Studio_2_OverEar = By.xpath("//img[@id='15']");

    public P04_HeadphonesPage(WebDriver driver) {
        this.driver = driver;
    }
    public P08_ProductSpecificationsPage clickOnHP_H2310_In_Ear() {
        clickOnElement(driver,HP_H2310_In_ear);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnBose_SoundLink_Around_Ear() {
        clickOnElement(driver,Bose_SoundLink_Around_ear);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnLogitech_USB_Headset_H390() {
        clickOnElement(driver,Logitech_USB_Headset_H390);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnBeats_Studio_2_OverEar() {
        clickOnElement(driver,Beats_Studio_2_OverEar);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOn_FEEL_YOUR_MUSIC_BuyNowButton() {
        clickOnElement(driver, BuyNowButton);
        return new P08_ProductSpecificationsPage(driver);
    }

}


















============================================================
FILE: src/main/java/Pages/P05_TabletsPage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import static Utilities.Utility.clickOnElement;

public class P05_TabletsPage {

    private final WebDriver driver;

    private final By travelConfidently_BuyNowButton = By.cssSelector("button[name='buy_now']");
    private final By HP_ElitePad_1000 = By.xpath("//img[@id='16']");
    private final By HP_Elite_x2_1011 = By.xpath("//img[@id='17']");
    private final By HP_Pro_Tablet_608 = By.xpath("//img[@id='18']");

    public P05_TabletsPage(WebDriver driver) {
        this.driver = driver;
    }

    public P08_ProductSpecificationsPage clickOnHP_ElitePad_1000() {
        clickOnElement(driver,HP_ElitePad_1000);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnHP_Elite_x2_1011() {
        clickOnElement(driver,HP_Elite_x2_1011);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_Pro_Tablet_608() {
        clickOnElement(driver,HP_Pro_Tablet_608);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnTravelConfidentlyBuyNowButton() {
        clickOnElement(driver, travelConfidently_BuyNowButton);
        return new P08_ProductSpecificationsPage(driver);
    }






}

============================================================
FILE: src/main/java/Pages/P06_SpeakersPage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import static Utilities.Utility.*;

public class P06_SpeakersPage {
    private final WebDriver driver;
    private final By ENJOY_PREMIUM_SOUND_BuyNowButton = By.cssSelector("button[name='buy_now']");
    private final By Bose_Soundlink_Bluetooth_Speaker = By.xpath("//img[@id='20']");
    private final By Bose_SoundLink_Wireless_Speaker = By.xpath("//img[@id='25']");
    private final By HP_Roar_Mini_Wireless_Speaker = By.xpath("//img[@id='24']");
    private final By HP_Roar_Plus_Wireless_Speaker = By.xpath("//img[@id='21']");
    private final By HP_Roar_Wireless_Speaker = By.xpath("//img[@id='22']");
    private final By HP_S9500_Bluetooth_Wireless_Speaker = By.xpath("//img[@id='19']");
    private final By Logitech_X100_Speaker_System= By.xpath("//img[@id='23']");

    public P06_SpeakersPage(WebDriver driver) {
        this.driver = driver;
    }

    public P08_ProductSpecificationsPage clickOnEnjoyPremiumSoundBuyNowButton() {
        clickOnElement(driver, ENJOY_PREMIUM_SOUND_BuyNowButton);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnBoseSoundlinkBluetoothSpeaker() {
        clickOnElement(driver,Bose_Soundlink_Bluetooth_Speaker);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnBoseSoundLinkWirelessSpeaker() {
        clickOnElement(driver,Bose_SoundLink_Wireless_Speaker);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnHPRoarMiniWirelessSpeaker() {
        clickOnElement(driver,HP_Roar_Mini_Wireless_Speaker);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHPRoarPlusWirelessSpeaker() {
        clickOnElement(driver,HP_Roar_Plus_Wireless_Speaker);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHPRoarWirelessSpeaker() {
        clickOnElement(driver,HP_Roar_Wireless_Speaker);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnHPS9500BluetoothWirelessSpeaker() {
        clickOnElement(driver,HP_S9500_Bluetooth_Wireless_Speaker);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnLogitechX100SpeakerSystem() {
        clickOnElement(driver,Logitech_X100_Speaker_System);
        return new P08_ProductSpecificationsPage(driver);
    }


}


============================================================
FILE: src/main/java/Pages/P07_MicePage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import static Utilities.Utility.clickOnElement;

public class P07_MicePage {
    private final WebDriver driver;
    private final By DISCOVER_OUR_WIRELESS_MICE_BuyNowButton = By.cssSelector("button[name='buy_now']");
    private final By HP_USB_3_Button_OpticalMouse = By.xpath("//img[@id='29']");
    private final By HP_Z3200_Wireless_Mouse = By.xpath("//img[@id='28']");
    private final By HP_Z3600_Wireless_Mouse = By.xpath("//img[@id='27']");
    private final By HP_Z4000_Wireless_Mouse = By.xpath("//img[@id='30']");
    private final By HP_Z8000_Bluetooth_Mouse = By.xpath("//img[@id='33']");
    private final By Kensington_Orbit_72337_Trackball= By.xpath("//img[@id='32']");
    private final By Kensington_Orbit_72352_Trackball = By.xpath("//img[@id='26']");
    private final By Logitech_G502_Proteus_Core = By.xpath("//img[@id='31']");
    private final By Microsoft_Sculpt_Touch_Mouse = By.xpath("//img[@id='34']");
    private final By silly_meerkat = By.xpath("//img[@id='45']");

    public P07_MicePage(WebDriver driver) {
        this.driver = driver;
    }

    public P08_ProductSpecificationsPage clickOnDiscoverOurWirelessMiceBuyNowButton() {
        clickOnElement(driver, DISCOVER_OUR_WIRELESS_MICE_BuyNowButton);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnKensington_Orbit_72352_Trackball() {
        clickOnElement(driver,Kensington_Orbit_72352_Trackball);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnHP_Z3600_Wireless_Mouse() {
        clickOnElement(driver,HP_Z3600_Wireless_Mouse);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_Z3200_Wireless_Mouse() {
        clickOnElement(driver,HP_Z3200_Wireless_Mouse);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnHP_USB_3_Button_OpticalMouse() {
        clickOnElement(driver,HP_USB_3_Button_OpticalMouse);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_Z4000_Wireless_Mouse() {
        clickOnElement(driver,HP_Z4000_Wireless_Mouse);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnLogitech_G502_Proteus_Core() {
        clickOnElement(driver,Logitech_G502_Proteus_Core);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnKensington_Orbit_72337_Trackball() {
        clickOnElement(driver,Kensington_Orbit_72337_Trackball);
        return new P08_ProductSpecificationsPage(driver);
    }

    public P08_ProductSpecificationsPage clickOnHP_Z8000_Bluetooth_Mouse() {
        clickOnElement(driver,HP_Z8000_Bluetooth_Mouse);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnMicrosoft_Sculpt_Touch_Mouse() {
        clickOnElement(driver,Microsoft_Sculpt_Touch_Mouse);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P08_ProductSpecificationsPage clickOnSillyMeerkat() {
        clickOnElement(driver,silly_meerkat);
        return new P08_ProductSpecificationsPage(driver);
    }


}


============================================================
FILE: src/main/java/Pages/P08_ProductSpecificationsPage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import java.io.IOException;

import static Utilities.Utility.*;

public class P08_ProductSpecificationsPage {
    private final WebDriver driver;
    //TODO: Add locators for the Product Specifications title and price elements
    private final By productTitle = By.xpath("//h1[@class='roboto-regular screen768 ng-binding']");
    private final By productPrice = By.xpath("//*[@id='Description']/h2");
    //TODO: Add locators for the chosen color element's locators on the Product Specifications page
    private final By firstColor = By.xpath("(//span[@id='bunny'])[1]");
    private final By secondColor = By.xpath("(//span[@id='bunny'])[2]");
    private final By thirdColor = By.xpath("(//span[@id='bunny'])[3]");
    //TODO: Add locators for the Product Quantity input field and the Product Price element
    private final By addQuantityButton = By.xpath("//div[@class='plus']");
    private final By subtractQuantityButton = By.xpath("//div[@class='minus']");
    private final By productQuantityInput = By.xpath("//input[@name='quantity']");
    //TODO: Add locators for the Add to Cart button and Shopping Cart icon
    private final By addToCartButton = By.cssSelector("button[name='save_to_cart']");
    private final By ShoppingCartIcon = By.id("menuCart");
    private final By LaptopsPageBack = By.cssSelector("a[class='ng-binding']");
    private final By HeadphonesPageBack = By.cssSelector("a[class='ng-binding']");
    private final By TabletsPageBack = By.cssSelector("a[class='ng-binding']");
    private final By SpeakersPageBack = By.cssSelector("a[class='ng-binding']");
    private final By MicePageBack = By.cssSelector("a[class='ng-binding']");




    public P08_ProductSpecificationsPage(WebDriver driver) {
        this.driver = driver;
    }

    // TODO: Navigates back to the Laptops page
    public P03_LaptopsPage clickOnLaptopsPageBack() {
        clickOnElement(driver, LaptopsPageBack);
        return new P03_LaptopsPage(driver);
    }

    // TODO: Navigates back to the Headphones page
    public P04_HeadphonesPage clickOnHeadphonesPageBack() {
        clickOnElement(driver, HeadphonesPageBack);
        return new P04_HeadphonesPage(driver);
    }

    // TODO: Navigates back to the Tablets page
    public P05_TabletsPage clickOnTabletsPageBack() {
        clickOnElement(driver, TabletsPageBack);
        return new P05_TabletsPage(driver);
    }

    // TODO: Navigates back to the Speakers page
    public P06_SpeakersPage clickOnSpeakersPageBack() {
        clickOnElement(driver, SpeakersPageBack);
        return new P06_SpeakersPage(driver);
    }

    // TODO: Navigates back to the Mice page
    public P07_MicePage clickOnMicePageBack() {
        clickOnElement(driver, MicePageBack);
        return new P07_MicePage(driver);
    }


    //TODO: Gets the product title text
    public String getProductTitle() {
        return getText(driver, productTitle);
    }
    //TODO: Gets the product price text
    public String getProductPrice() {
        return getText(driver, productPrice);
    }


    // TODO: Checks if the product title matches the expected title
    public boolean isProductTitleEqualTo(String expectedTitle) {
        return getText(driver, productTitle).equals(expectedTitle);
    }

    // TODO: Checks if the product price matches the expected price
    public boolean isProductPriceEqualTo(String expectedPrice) {
        return getText(driver, productPrice).equals(expectedPrice);
    }



    // TODO: Selects the first color option
    public P08_ProductSpecificationsPage clickFirstColorRadioButton() {
        try {
        clickOnElement(driver, firstColor);
        } catch (Exception e) {
            // Handle the case where the first color choice is not available
            System.out.println("First color choice is not available: " + e.getMessage());
        }
        return this;
    }
    // TODO: Selects the second color option
    public P08_ProductSpecificationsPage clickSecondColorRadioButton() {
        try {
        clickOnElement(driver, secondColor);
        } catch (Exception e) {
            // Handle the case where the second color choice is not available
            System.out.println("Second color choice is not available: " + e.getMessage());
        }
        return this;
    }
    // TODO: Selects the third color option
    public P08_ProductSpecificationsPage clickThirdColorRadioButton() {
        try {
        clickOnElement(driver, thirdColor);
        } catch (Exception e) {
            // Handle the case where the third color choice is not available
            System.out.println("Third color choice is not available: " + e.getMessage());
        }
        return this;
    }


    // TODO: Checks if the first color option is selected
    public Boolean isFirstColorSelected() {
        return findWebElement(driver,firstColor).getAttribute("class").contains("colorSelected");
    }
    // TODO: Checks if the second color option is selected
    public Boolean isSecondColorSelected() {
        return findWebElement(driver,secondColor).getAttribute("class").contains("colorSelected");
    }
    // TODO: Checks if the third color option is selected
    public Boolean isThirdColorSelected() {
        return findWebElement(driver,thirdColor).getAttribute("class").contains("colorSelected");
    }









    // TODO: Increases the product quantity by the specified amount
    public P08_ProductSpecificationsPage clickOnAddQuantityButton(int quantity) {
        for (int i = 0; i < quantity; i++) {
            clickOnElement(driver, addQuantityButton);
        }
        return this;
    }
    // TODO: Decreases the product quantity by the specified amount
    public P08_ProductSpecificationsPage clickOnSubtractQuantityButton( int quantity) {
        for (int i = 0; i < quantity; i++) {
            clickOnElement(driver, subtractQuantityButton);
        }
        return this;
    }

    // TODO: Checks if the product quantity input field matches the expected number
    public boolean isQuantityInputFieldEqualTo(String number) {
        return findWebElement(driver, productQuantityInput).getAttribute("value").equals(number);
    }

    // TODO: Retrieves the text from the product quantity input field
    public String getQuantityNumber() {
        return findWebElement(driver, productQuantityInput).getAttribute("value");
    }


    // TODO: Sets the product quantity input field
    public P08_ProductSpecificationsPage setProductQuantity(String quantity) {
        clearAndSendData( driver, productQuantityInput, quantity);
        return this;
    }




    // TODO: Clicks the Add to Cart button
    public P08_ProductSpecificationsPage clickOnAddToCartButton() {
        clickOnElement(driver, addToCartButton);
        return this;
    }

    // TODO: Clicks the Shopping Cart icon and navigates to the Shopping Cart page
    public P09_ShoppingCartPage clickOnShoppingCart() throws IOException {
        clickOnElement(driver, ShoppingCartIcon);
        return new P09_ShoppingCartPage(driver);
    }

}


============================================================
FILE: src/main/java/Pages/P09_ShoppingCartPage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import static Utilities.Utility.*;

public class P09_ShoppingCartPage {
    private final WebDriver driver;
    private final By CheckOutButton = By.id("checkOutButton");
    private final By continueShoppingButton = By.xpath("//a[normalize-space()='CONTINUE SHOPPING']");
    private final By shopping_cart_is_emptyLabel = By.xpath("//label[@class='roboto-bold ng-scope']");
    //TODO : Add locators for product remove buttons in Cart Icon
    private final By productRemoveButton_P1 = By.xpath("(//a[text()='REMOVE'])[1]");
    private final By productRemoveButton_P2 = By.xpath("(//a[text()='REMOVE'])[2]");
    private final By productRemoveButton_P3 = By.xpath("(//a[text()='REMOVE'])[3]");
    private final By productRemoveButton_P4 = By.xpath("(//a[text()='REMOVE'])[4]");
    //TODO : Add locators for product edit buttons in Cart Icon
    private final By productEditButton_P1 = By.xpath("(//a[text()='EDIT'])[1]");
    private final By productEditButton_P2 = By.xpath("(//a[text()='EDIT'])[2]");
    private final By productEditButton_P3 = By.xpath("(//a[text()='EDIT'])[3]");
    private final By productEditButton_P4 = By.xpath("(//a[text()='EDIT'])[4]");

    //TODO : Add locators for product base remove and edit buttons in shopping Cart page
    private final By productRemoveButton = By.xpath("(//a[text()='REMOVE'])[]");



    public P09_ShoppingCartPage(WebDriver driver) {
        this.driver = driver;
    }

    public String getShoppingCartIsEmptyLabelText() {
        return getText(driver , shopping_cart_is_emptyLabel);
    }
    public  Boolean isShoppingCartIsEmptyLabelDisplayed() {
        return getShoppingCartIsEmptyLabelText().contains("Your shopping cart is empty");
    }

    public P10_ShippingDetailsPage clickOnCheckOutButton() {
        clickOnElement(driver,CheckOutButton);
        return new P10_ShippingDetailsPage(driver);
    }
    public P02_HomePage clickOnContinueShoppingButton() {
        clickOnElement(driver, continueShoppingButton);
        return new P02_HomePage(driver);
    }

    public P09_ShoppingCartPage clickOnProductRemoveButton_P1() {
        clickOnElement(driver, productRemoveButton_P1);
        return this;
    }
    public P09_ShoppingCartPage clickOnProductRemoveButton_P2() {
        clickOnElement(driver, productRemoveButton_P2);
        return this;
    }
    public P09_ShoppingCartPage clickOnProductRemoveButton_P3() {
        clickOnElement(driver, productRemoveButton_P3);
        return this;
    }
    public P09_ShoppingCartPage clickOnProductRemoveButton_P4() {
        clickOnElement(driver, productRemoveButton_P4);
        return this;
    }




    public P08_ProductSpecificationsPage clickOnProductEditButton_P1() {
        clickOnElement(driver, productEditButton_P1);
        return new P08_ProductSpecificationsPage(driver);
    }
    public P09_ShoppingCartPage clickOnProductEditButton_P2() {
        clickOnElement(driver, productEditButton_P2);
        return this;
    }
    public P09_ShoppingCartPage clickOnProductEditButton_P3() {
        clickOnElement(driver, productEditButton_P3);
        return this;
    }
    public P09_ShoppingCartPage clickOnProductEditButton_P4() {
        clickOnElement(driver, productEditButton_P4);
        return this;
    }













}


============================================================
FILE: src/main/java/Pages/P10_ShippingDetailsPage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import java.util.Objects;

import static Utilities.Utility.*;

public class P10_ShippingDetailsPage {
    private final WebDriver driver;
    private final By PaymentMethodSection = By.xpath("//label[normalize-space()='2. PAYMENT METHOD']");
    private final By shippingDetailsSection = By.xpath("//label[normalize-space()='1. SHIPPING DETAILS']");
    private final By nextButtonInShippingDetails = By.xpath("(//button[@id='next_btn'])[1]");
    private final By editShippingDetailsLink = By.xpath("//a[normalize-space()='Edit shipping details']");
    private final By backButton = By.xpath("//a[normalize-space()='BACK']");
    private final By saveChangesCheckBox = By.xpath("//input[@name='agree_agreement']");
    private final By nextButtonInEditShippingDetails = By.xpath("(//button[@id='next_btn'])[2]");
    private final By BackToShippingDetailsLink = By.xpath("//a[normalize-space()='Back to shipping details']");
    private final By payNowButton_SAFEPAY = By.id("pay_now_btn_SAFEPAY");
    private final By payNowButton_MasterCredit = By.id("pay_now_btn_MasterCredit");
    //TODO: Add locators forRecipient details in Edit shipping details and Address
    private final By firstNameField = By.xpath("//input[@name='first_name']");
    private final By lastNameField = By.xpath("//input[@name='last_name']");
    private final By phoneNumberField = By.xpath("//input[@name='phone_number']");
    private final By countryListBox = By.xpath("//select[@name='countryListbox']");
    private final By cityField = By.xpath("//input[@name='city']");
    private final By addressField = By.xpath("//input[@name='address']");
    private final By postalCodeField = By.xpath("//input[@name='postal_code']");
    private final By stateField = By.xpath("//input[@name='state_/_province_/_region']");

    public P10_ShippingDetailsPage(WebDriver driver) {
        this.driver = driver;
    }

    public P11_PaymentMethodsPage clickOnFirstNextButtonInShippingDetails() {
        clickOnElement(driver, nextButtonInShippingDetails);
        return new P11_PaymentMethodsPage(driver);
    }public P11_PaymentMethodsPage clickOnSecondNextButtonInEditShippingDetails() {
        clickOnElement(driver, nextButtonInEditShippingDetails);
        return new P11_PaymentMethodsPage(driver);
    }
    /*
    public P10_ShippingDetailsPage clickOnBackToShippingDetailsLink() {
        clickOnElement(driver, BackToShippingDetailsLink);
        return this;
    }

    public P11_PaymentMethodsPage clickOnPayNowButtonUsingSAFEPAY() {
        clickOnElement(driver, payNowButton_SAFEPAY);
        return new P11_PaymentMethodsPage(driver);
    }
    public P11_PaymentMethodsPage clickOnPayNowButtonUsingMasterCredit() {
        clickOnElement(driver, payNowButton_MasterCredit);
        return new P11_PaymentMethodsPage(driver);
    }

     */

    public Boolean isPaymentMethodSectionSelected() {
        return Objects.requireNonNull(findWebElement(driver, PaymentMethodSection).getAttribute("class")).contains("selected");
    }


    public Boolean isShippingDetailsSectionSelected() {
        return Objects.requireNonNull(findWebElement(driver, shippingDetailsSection).getAttribute("class")).contains("selected");
    }


    public P10_ShippingDetailsPage clickOnEditShippingDetailsLink() {
        clickOnElement(driver, editShippingDetailsLink);
        return this;
    }
    public P10_ShippingDetailsPage clickOnBackButton() {
        clickOnElement(driver, backButton);
        return this;
    }
    public P10_ShippingDetailsPage clickOnSaveChangesCheckBox() {
        clickOnElement(driver, saveChangesCheckBox);
        return this;
    }


//TODO: Add methods for Recipient details in Edit shipping details and Address if loged in as a registered user
    public P10_ShippingDetailsPage editFirstName(String firstName) {
        clearAndSendData(driver,firstNameField,firstName);
        return this;
    }
    public P10_ShippingDetailsPage editLastName(String lastName) {
        clearAndSendData(driver,lastNameField,lastName);
        return this;
    }
    public P10_ShippingDetailsPage editPhoneNumber(String phoneNumber) {
        clearAndSendData(driver, phoneNumberField, phoneNumber);
        return this;
    }

    public P10_ShippingDetailsPage selectCountry(String country) {
        dropDownSelect(driver, countryListBox, country);
        return this;
    }
    public P10_ShippingDetailsPage editCity(String city) {
        clearAndSendData(driver, cityField, city);
        return this;
    }
    public P10_ShippingDetailsPage editAddress(String address) {
        clearAndSendData(driver, addressField, address);
        return this;
    }
    public P10_ShippingDetailsPage editPostalCode(String postalCode) {
        clearAndSendData(driver, postalCodeField, postalCode);
        return this;
    }
    public P10_ShippingDetailsPage editState(String state) {
        clearAndSendData(driver, stateField, state);
        return this;
    }



}


============================================================
FILE: src/main/java/Pages/P11_PaymentMethodsPage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import static Utilities.Utility.clearAndSendData;
import static Utilities.Utility.clickOnElement;

public class P11_PaymentMethodsPage {
    private final WebDriver driver;

    //TODO: Add locators for SafePay payment method
    private final By paymentMethodsSafePay = By.xpath("//img[@alt='Safepay']");
    private final By SafePay_usernameField = By.xpath("//input[@name='safepay_username']");
    private final By SafePay_PassWordField = By.xpath("//input[@name='safepay_password']");
    private final By saveChangesCheckBox_SafePay = By.xpath("//input[@name='save_safepay']");
    private final By BackToShippingDetailsLink = By.xpath("(//a[normalize-space()='Back to shipping details'])[1]");
    private final By payNowButton_SAFEPAY = By.id("pay_now_btn_SAFEPAY");
    //TODO: Add locators for Master credit payment method
    private final By paymentMethodsMasterCredit = By.xpath("//img[@alt='Master credit']");
    private final By paymentMethodsMasterCredit_EditButton = By.xpath("(//label[normalize-space()='Edit'])[1]");
    private final By MasterCredit_card_number = By.id("creditCard");
    private final By MasterCredit_CVV_number = By.xpath("//input[@name='cvv_number']");
    private final By MasterCredit_cardHolderName = By.xpath("//input[@name='cardholder_name']");
    private final By saveChangesCheckBox_MasterCredit = By.xpath("(//input[@name='save_master_credit'])[1]");
    private final By PayNowButton_MasterCredit = By.id("pay_now_btn_ManualPayment");

    public P11_PaymentMethodsPage(WebDriver driver) {
        this.driver = driver;
    }

    public P10_ShippingDetailsPage clickOnBackToShippingDetailsLink() {
        clickOnElement(driver, BackToShippingDetailsLink);
        return new P10_ShippingDetailsPage(driver);
    }

    //TODO: Add methods for SafePay payment method -------------------------------------------------------------
    public P11_PaymentMethodsPage clickOnPaymentMethodsSafePay() {
        clickOnElement(driver, paymentMethodsSafePay);
        return this;
    }
    public P11_PaymentMethodsPage sendSafePayUserName(String userName) {
        clearAndSendData(driver,SafePay_usernameField,userName);
        return this;
    }
    public P11_PaymentMethodsPage sendSafePayPassword(String password) {
        clearAndSendData(driver,SafePay_PassWordField,password);
        return this;
    }
    public P11_PaymentMethodsPage clickOnSaveChangesCheckBox_SafePay() {
        clickOnElement(driver, saveChangesCheckBox_SafePay);
        return this;
    }
    public P12_OrderSummaryPage clickOnPayNowButton_SAFEPAY() {
        clickOnElement(driver,payNowButton_SAFEPAY);
        return new P12_OrderSummaryPage(driver);
    }


    //TODO: Add methods for Master credit payment method---------------------------------------------------------

    public P11_PaymentMethodsPage clickOnPaymentMethods_MasterCredit() {
        clickOnElement(driver, paymentMethodsMasterCredit);
        return this;
    }
    public P11_PaymentMethodsPage clickOnPaymentMethodsMasterCredit_EditButton() {
        clickOnElement(driver, paymentMethodsMasterCredit_EditButton);
        return this;
    }
    public P11_PaymentMethodsPage sendMasterCreditCardNumber(String cardNumber) {
        clearAndSendData(driver, MasterCredit_card_number, cardNumber);
        return this;
    }
    public P11_PaymentMethodsPage sendMasterCreditCVVNumber(String cvvNumber) {
        clearAndSendData(driver, MasterCredit_CVV_number, cvvNumber);
        return this;
    }
    public P11_PaymentMethodsPage sendMasterCreditCardHolderName(String cardHolderName) {
        clearAndSendData(driver, MasterCredit_cardHolderName, cardHolderName);
        return this;
    }
    public P11_PaymentMethodsPage clickOnSaveChangesCheckBox_MasterCredit() {
        clickOnElement(driver, saveChangesCheckBox_MasterCredit);
        return this;
    }
    public P12_OrderSummaryPage clickOnPayNowButton_MasterCredit() {
        clickOnElement(driver,PayNowButton_MasterCredit);
        return new P12_OrderSummaryPage(driver);
    }



}


============================================================
FILE: src/main/java/Pages/P12_OrderSummaryPage.java
============================================================
package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import static Utilities.Utility.getText;

public class P12_OrderSummaryPage {
    private final WebDriver driver;
    private final By orderSummarySection = By.xpath("//span[contains(@class,'roboto-regular ng-scope')]");

    public P12_OrderSummaryPage(WebDriver driver) {
        this.driver = driver;
    }

    public boolean isOrderSummaryPageDisplayed( ) {
        return getText(driver,orderSummarySection ).equals(getOrderSummaryTitle());
    }
    public String getOrderSummaryTitle() {
        return getText(driver, orderSummarySection);
    }
}


============================================================
FILE: src/main/java/Pages/page_source.txt
============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>AdvantageOnlineShopping-AutomationProject</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <seleniumVersion>4.34.0</seleniumVersion>
        <testNGVersion>7.11.0</testNGVersion>
        <slf4jVersion>2.0.17</slf4jVersion>
        <slf4jVersionAPI>2.0.17</slf4jVersionAPI>
        <log4jVersion>2.25.0</log4jVersion>
        <GsonVersion>2.13.1</GsonVersion>
        <javafakerVersion>1.0.2</javafakerVersion>
        <allureVersion>2.29.1</allureVersion>
        <shutterBugVersion>1.6</shutterBugVersion>
        <aspectj.version>1.9.22</aspectj.version>
        <allure-commandlineVersion>2.34.1</allure-commandlineVersion>
        <allureApi.version>2.34.1</allureApi.version>

        <suite.Headphones>Test Runner/HeadphonesSuite.xml</suite.Headphones>
        <suite.Home>Test Runner/HomeSuite.xml</suite.Home>
        <suite.Laptops>Test Runner/LaptopsSuite.xml</suite.Laptops>
        <suite.LogIn>Test Runner/LogInSuite.xml</suite.LogIn>
        <suite.Mices>Test Runner/MicesSuite.xml</suite.Mices>
        <suite.OrderSummary>Test Runner/OrderSummarySuite.xml</suite.OrderSummary>
        <suite.PaymentMethods>Test Runner/PaymentMethodsSuite.xml</suite.PaymentMethods>
        <suite.ProductSpecifications>Test Runner/ProductSpecificationsSuite.xml</suite.ProductSpecifications>
        <suite.Regression>Test Runner/RegressionSuite.xml</suite.Regression>
        <suite.ShippingDetails>Test Runner/ShippingDetailsSuite.xml</suite.ShippingDetails>
        <suite.ShoppingCart>Test Runner/ShoppingCartSuite.xml</suite.ShoppingCart>
        <suite.Speakers>Test Runner/SpeakersSuite.xml</suite.Speakers>
        <suite.Tablets>Test Runner/TabletsSuite.xml</suite.Tablets>
    </properties>



    <dependencies>
        <!-- https://mvnrepository.com/artifact/io.qameta.allure/allure-plugin-api -->
        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-plugin-api</artifactId>
            <version>${allureApi.version}</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj.version}</version>
        </dependency>
        <dependency>
            <groupId>com.assertthat</groupId>
            <artifactId>selenium-shutterbug</artifactId>
            <version>${shutterBugVersion}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.seleniumhq.selenium</groupId>
                    <artifactId>selenium-java</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${seleniumVersion}</version>
        </dependency>

        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>5.8.0</version>
        </dependency>

        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testNGVersion}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4jVersion}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4jVersionAPI}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4jVersion}</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${GsonVersion}</version>
        </dependency>

        <dependency>
            <groupId>com.github.javafaker</groupId>
            <artifactId>javafaker</artifactId>
            <version>${javafakerVersion}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.qameta.allure/allure-commandline -->
        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-commandline</artifactId>
            <version>${allure-commandlineVersion}</version>
        </dependency>

        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-testng</artifactId>
            <version>${allureVersion}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${aspectj.version}</version>
            <scope>runtime</scope>
        </dependency>
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjtools</artifactId>
                <version>${aspectj.version}</version>
            </dependency>
    </dependencies>

    <build>
        <directory>Test-outputs/target</directory>
        <plugins>
            <plugin>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-maven</artifactId>
                <version>2.12.0</version>
                <configuration>
                    <reportVersion>${allureVersion}</reportVersion>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.5.3</version>
                <configuration>
                    <suiteXmlFiles>
                        <suiteXmlFile>${suite.OrderSummary}</suiteXmlFile>
                    </suiteXmlFiles>
                </configuration>
            </plugin>
            <plugin>
                <groupId>dev.aspectj</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>1.14.1</version>
                <configuration>
                    <complianceLevel>21</complianceLevel>
                    <source>21</source>
                    <target>21</target>
                    <showWeaveInfo>true</showWeaveInfo>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <version>${aspectj.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>regressionProfile</id>
            <build>
                <directory>Test-outputs/target</directory>
                <plugins>
                    <plugin>
                        <groupId>io.qameta.allure</groupId>
                        <artifactId>allure-maven</artifactId>
                        <configuration>
                            <reportVersion>${allureVersion}</reportVersion>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <source>${maven.compiler.source}</source>
                            <target>${maven.compiler.target}</target>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <suiteXmlFiles>
                                <suiteXmlFile>${suite.Regression}</suiteXmlFile>
                            </suiteXmlFiles>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>dev.aspectj</groupId>
                        <artifactId>aspectj-maven-plugin</artifactId>
                        <configuration>
                            <complianceLevel>21</complianceLevel>
                            <source>21</source>
                            <target>21</target>
                            <showWeaveInfo>true</showWeaveInfo>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>compile</goal>
                                    <goal>test-compile</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>End2EndScenarioProfile</id>
            <build>
                <directory>Test-outputs/target</directory>
                <plugins>
                    <plugin>
                        <groupId>io.qameta.allure</groupId>
                        <artifactId>allure-maven</artifactId>
                        <configuration>
                            <reportVersion>${allureVersion}</reportVersion>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <source>${maven.compiler.source}</source>
                            <target>${maven.compiler.target}</target>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <suiteXmlFiles>
                                <suiteXmlFile>${suite.OrderSummary}</suiteXmlFile>
                            </suiteXmlFiles>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>dev.aspectj</groupId>
                        <artifactId>aspectj-maven-plugin</artifactId>
                        <configuration>
                            <complianceLevel>21</complianceLevel>
                            <source>21</source>
                            <target>21</target>
                            <showWeaveInfo>true</showWeaveInfo>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>compile</goal>
                                    <goal>test-compile</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>

============================================================
FILE: src/main/java/Pages/pagesName.txt
============================================================
فيما يلي قائمة بجميع “الصفحات” (أو الـ “Views”) الرئيسية المتوفرة في تطبيق Advantage Online Shopping (SPA) والتي ينبغي تغطيتها في مشروع الأوتوميشن:

1. **Home Page**

   * المسار: `/#/home` أو مجرد `/#/`
   * يعرض بانر المنتجات، الفئات، وعرض سريع للمنتجات.

2. **Categories Page**

   * المسار: `/#/allCategories`
   * يعرض قائمة بفئات المنتجات (Laptops, Speakers, Tablets, Phones وغيرها).

3. **Product Listing Page**

   * المسار: `/#/category/:categoryId`
   * يعرض جميع المنتجات التي تنتمي إلى فئة معينة.

4. **Product Details Page**

   * المسار: `/#/product/:productId`
   * يعرض تفاصيل المنتج: صور، مواصفات، زر “Add to Cart”.

5. **Shopping Cart Page**

   * المسار: `/#/shoppingCart`
   * يعرض المنتجات المضافة، الإجمالي، وأزرار “Checkout” و“Continue Shopping”.

6. **Checkout Page**

   * المسار: `/#/checkout`
   * نموذج لإدخال تفاصيل الشحن والدفع.

7. **Order Confirmation Page**

   * المسار: `/#/orderConfirmation`
   * يعرض رسالة نجاح الطلب ورقم الطلب.

8. **Login Page**

   * المسار: `/#/login` (أو نافذة منبثقة)
   * حقول إدخال البريد الإلكتروني وكلمة السر، وزر “Sign In”.

9. **Register Page**

   * المسار: `/#/register`
   * حقول إنشاء حساب جديد: الاسم، البريد، كلمة السر، تأكيد كلمة السر.

10. **User Account / Orders History Page**

    * المسار: `/#/userAccount` أو `/#/orders`
    * يعرض معلومات الحساب والطلبات السابقة (في حال دعمها من الـ Demo).

11. **Search Results Page**

    * المسار: `/#/search?query=…`
    * يعرض النتائج بناءً على مصطلح البحث (إذا كانت الخاصية مفعّلة).

12. **Settings / Profile Page**

    * المسار: `/#/settings`
    * يتيح تعديل بيانات المستخدم (إن وجدت في الـ Demo).

–––

هذه القائمة تغطي جميع شاشات المستخدم التي يحتاجها مشروع الـ Automation لتعريف Page Objects وحالات الاختبار. إذا وجدت صفحات إضافية في الـ Demo (مثل صفحات السياسات أو الدعم) يمكنك إضافتها بنفس النمط أعلاه.


============================================================
FILE: src/main/java/Pages/TestName.txt
============================================================
تمام يا نجم، دي قائمة **بجميع الصفحات الأساسية (modules)** في موقع [Advantage Online Shopping](https://advantageonlineshopping.com/#/)، مع **أسماء الـ Page Objects (Class)** و **أسماء كلاسات الـ Test Cases المقابلة** لها، بنفس النمط اللي اتبعناه في مشروع SwagLabs:

---

### 🏠 1. **Home Page**

* **Page Object Class**: `P01_HomePage.java`
* **Test Class**: `TC01_HomeNavigationTest.java`
* ✅ يشمل: تصفح الفئات، التحقق من وجود البانر، روابط المنتجات

---

### 🔐 2. **Login Page / Modal**

* **Page Object Class**: `P02_LoginPage.java`
* **Test Class**: `TC02_LoginTest.java`
* ✅ يشمل: تسجيل الدخول بـ valid / invalid credentials

---

### 🆕 3. **Register Page**

* **Page Object Class**: `P03_RegisterPage.java`
* **Test Class**: `TC03_RegisterTest.java`
* ✅ يشمل: تسجيل مستخدم جديد والتحقق من نجاح العملية

---

### 📂 4. **Category Page (Laptops, Tablets, etc.)**

* **Page Object Class**: `P04_CategoryPage.java`
* **Test Class**: `TC04_CategoryNavigationTest.java`
* ✅ يشمل: التنقل داخل الأقسام، والتحقق من عدد المنتجات المعروضة

---

### 📄 5. **Product Details Page**

* **Page Object Class**: `P05_ProductDetailsPage.java`
* **Test Class**: `TC05_ProductDetailsTest.java`
* ✅ يشمل: عرض تفاصيل منتج، السعر، المواصفات، الصور

---

### 🛒 6. **Shopping Cart Page**

* **Page Object Class**: `P06_CartPage.java`
* **Test Class**: `TC06_AddToCartTest.java`
* ✅ يشمل: إضافة منتجات للسلة، إزالة منتج، التحقق من الإجمالي

---

### 💳 7. **Checkout Page**

* **Page Object Class**: `P07_CheckoutPage.java`
* **Test Class**: `TC07_CheckoutTest.java`
* ✅ يشمل: إدخال بيانات الشحن والدفع، الضغط على “Pay Now”

---

### ✅ 8. **Order Confirmation Page**

* **Page Object Class**: `P08_ConfirmationPage.java`
* **Test Class**: `TC08_ConfirmationTest.java`
* ✅ يشمل: التحقق من رسالة نجاح الطلب ورقم الطلب

---

### 👤 9. **User Account / Orders Page**

* **Page Object Class**: `P09_AccountPage.java`
* **Test Class**: `TC09_OrderHistoryTest.java`
* ✅ يشمل: عرض الطلبات السابقة، تسجيل الخروج

---

### 🔍 10. **Search Results Page**

* **Page Object Class**: `P10_SearchPage.java`
* **Test Class**: `TC10_SearchFunctionalityTest.java`
* ✅ يشمل: البحث عن منتج والتحقق من النتائج

---

### ⚙️ 11. **Settings / Profile Page**

* **Page Object Class**: `P11_SettingsPage.java`
* **Test Class**: `TC11_EditProfileTest.java`
* ✅ يشمل: تعديل بيانات المستخدم، حفظ الإعدادات

---

### 📦 BONUS: Common Components

* **Component Class**: `P00_HeaderComponent.java`
* **Used in Tests**: All test classes
* ✅ يشمل: أيقونة السلة، تسجيل الخروج، التنقل بين الصفحات

---

هل تحب أبدأ أنفذ أول صفحة كاملة بالـ Page Object والـ Test Class؟ ولا تفضل أبدأ بالكارت أو اللوجين؟




⬇️ أسماء مقترحة للكلاسات:
الفئة	اسم Page Class	اسم Test Class
Laptops       	LaptopsPage	LaptopsTests
Tablets	     TabletsPage	TabletsTests
Speakers	 SpeakersPage	SpeakersTests
Headphones 	HeadphonesPage	HeadphonesTests
Mice         MicePage	MiceTests
Monitors	MonitorsPage	MonitorsTests







============================================================
FILE: src/main/java/Utilities/DataUtils.java
============================================================
package Utilities;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.Properties;

public class DataUtils {

    private static final String TestDataPath = "src/test/resources/TestData/";
    //TODO : reading data from JSON file

    public static String getJsonData(String FileName, String Field) {
        try {
            // Define object of file reader
            FileReader reader = new FileReader(TestDataPath + FileName + ".json");
            // Result : src/test/resources/TestData/validLogin.json

            // Parse the JSON directory into JSON element
            JsonElement jsonElement = JsonParser.parseReader(reader);
            return jsonElement.getAsJsonObject().get(Field).getAsString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return " ";
    }

    //TODO : reading data from properties file
    public static String getPropertyData(String FileName, String key) throws IOException {
        Properties properties = new Properties();
        properties.load(new FileInputStream(TestDataPath + FileName + ".properties"));
        return properties.getProperty(key);
    }
}


============================================================
FILE: src/main/java/Utilities/LogsUtils.java
============================================================
package Utilities;

import org.apache.logging.log4j.LogManager;

public class LogsUtils {
    public static final String logsPath = "Test-outputs/Logs/";

    public static void trace(String message) {
        LogManager.getLogger(Thread.currentThread().getStackTrace()[2].toString())
                .trace(message);
    }

    public static void debug(String message) {
        LogManager.getLogger(Thread.currentThread().getStackTrace()[2].toString())
                .debug(message);
    }

    public static void info(String message) {
        LogManager.getLogger(Thread.currentThread().getStackTrace()[2].toString())
                .info(message);
    }

    public static void warn(String message) {
        LogManager.getLogger(Thread.currentThread().getStackTrace()[2].toString())
                .warn(message);
    }

    public static void error(String message) {
        LogManager.getLogger(Thread.currentThread().getStackTrace()[2].toString())
                .error(message);
    }

    public static void fatal(String message) {
        LogManager.getLogger(Thread.currentThread().getStackTrace()[2].toString())
                .fatal(message);
    }

}


============================================================
FILE: src/main/java/Utilities/Utility.java
============================================================
package Utilities;

import com.assertthat.selenium_shutterbug.core.Capture;
import com.assertthat.selenium_shutterbug.core.Shutterbug;
import io.qameta.allure.Allure;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.*;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.*;

public class Utility {
    private static final String ScreenShotsPath = "Test-outputs/ScreenShots/";
    //TODO: allure : allure serve - allure Generate - allure open

    /**
     * Java Documentation
     * chick on element with explicit wait
     *
     * @param driver
     * @param locator
     */
    //TODO : General Actions with Enhancement >>>>>>
    //TODO : chick on element with explicit wait
    public static void clickOnElement(WebDriver driver, By locator) {
       // waitForLoaderToDisappear(driver);
        delay(500);
        new WebDriverWait(driver, Duration.ofSeconds(7))
                .until(ExpectedConditions.elementToBeClickable(locator));
        driver.findElement(locator).click();
    }
//TODO:  Adds a delay (sleep) for the specified number of milliseconds
    public static void delay(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    public static void pressEnter(WebDriver driver,By locator) {
        driver.findElement(locator).sendKeys(Keys.ENTER);
    }


    public static void backToPageUsingURL(WebDriver driver , String URL) {
        //waitForLoaderToDisappear(driver);
        // Navigate back to the previous page and then to the specified URL
        driver.get(URL);
    }
    public static void backToPreviousPage(WebDriver driver) {
        //waitForLoaderToDisappear(driver);
        // Navigate back to the previous page
        driver.navigate().back();
    }




    // TODO: Wait for the loader element to disappear before proceeding.
    public static void waitForLoaderToDisappear(WebDriver driver) {
        By loaderLocator = By.xpath("div.loader");
        new WebDriverWait(driver, Duration.ofSeconds(3))
            .until(ExpectedConditions.invisibilityOfElementLocated(loaderLocator));
    }

    //TODO : element get Text with explicit wait
    public static String getText(WebDriver driver, By locator) {
        new WebDriverWait(driver, Duration.ofSeconds(5))
                .until(ExpectedConditions.visibilityOfElementLocated(locator));
        return driver.findElement(locator).getText();
    }

    //TODO : send keys data with explicit wait
    public static void sendData(WebDriver driver, By locator, String text) {
        new WebDriverWait(driver, Duration.ofSeconds(5))
                .until(ExpectedConditions.visibilityOfElementLocated(locator));
        driver.findElement(locator).sendKeys(text);
    }
    //TODO : send keys data with explicit wait
    public static void clearAndSendData(WebDriver driver, By locator, String text) {
        new WebDriverWait(driver, Duration.ofSeconds(5))
                .until(ExpectedConditions.visibilityOfElementLocated(locator)); //elementToBeClickable
        driver.findElement(locator).click(); // click to focus on the input field
        driver.findElement(locator).clear(); // clear the input field before sending keys
        driver.findElement(locator).sendKeys(Keys.chord(Keys.CONTROL, "a")); // select all text
        driver.findElement(locator).sendKeys(text);
    }

    //TODO : select from Drop Down
    public static void dropDownSelect(WebDriver driver, By locator, String option) { //select visible value from drop down list
        new Select(findWebElement(driver, locator)).selectByVisibleText(option);

    }

    //TODO : Wait Methods >>>>>
    public static void implicitWait(WebDriver driver, int seconds) {
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds));
    }

    public static WebDriverWait generalWait(WebDriver driver) {
        return new WebDriverWait(driver, Duration.ofSeconds(5)); // call + .until(action)
    }

    //TODO : Scroll down
    public static void scroll(WebDriver driver) {
        new Actions(driver).scrollByAmount(0, 200).perform();
    }

    //TODO : Scroll down to specific element
    public static void scrollingToElement(WebDriver driver, By locator) {
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", findWebElement(driver, locator));
    }

    //TODO : Return Web Element with By locator (By to Web Element)
    public static WebElement findWebElement(WebDriver driver, By locator) {
         new WebDriverWait(driver, Duration.ofSeconds(5))
         .until(ExpectedConditions.visibilityOfElementLocated(locator));
        return driver.findElement(locator);
    }

    public boolean isElementSelected(WebDriver driver , By locator) {
        return findWebElement(driver,locator).getAttribute("class").contains("selected");
    }

    //TODO : Time and Date format
    public static String getTimeStamp() {
        return new SimpleDateFormat("yyyy-MM-dd-h-mm-ssa").format(new Date());
    }

    //TODO : talking a screenShots
    public static void takingScreenShot(WebDriver driver, String imageName) {

        try { // try & catch used to prevent crashing the script if taking the screenshots field
            //capture Screenshot
            File src = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            //save Screenshots to file
            File target = new File(ScreenShotsPath + "-" + getTimeStamp() + imageName + ".png");
            FileUtils.copyFile(src, target);
            //Add screenshot to allure report
            Allure.addAttachment(imageName, Files.newInputStream(Path.of(target.getPath())));
        } catch (Exception e) {
            LogsUtils.error(e.getMessage()); // or : e.printStackTrace();
        }

    }

    /**
     * Taking a fullscreenShot
     *
     * @param driver
     * @param locator
     */
    //TODO : Taking a screenshot for fullscreen
    public static void takingFullscreenShot(WebDriver driver, By locator) {
        try {
            Shutterbug.shootPage(driver, Capture.FULL_SCROLL)
                    .highlight(findWebElement(driver, locator))
                    .save(ScreenShotsPath);
        } catch (Exception e) {
            LogsUtils.error(e.getMessage());
        }
    }

    //TODO : taking a screenShots for specific element
    public static void takingScreenShotForElement(WebDriver driver, By locator, String imageName) throws IOException {

        File src = (driver.findElement(locator)).getScreenshotAs(OutputType.FILE);
        File target = new File(ScreenShotsPath + imageName + ".png");
        FileUtils.copyFile(src, target);
        Allure.addAttachment(imageName, Files.newInputStream(Path.of(target.getPath())));

    }

    //TODO : generate Random numbers
    public static int generateRandom(int upperBound) { // 5 >> (0,1,2,3,4)
        return new Random().nextInt(upperBound) + 1; //allow redundancy >> 1 , 2 ,1 , 2 ,1
    }

    //TODO : generate unique Random numbers (set list unique elements)
    public static Set<Integer> generateUniqueNumbers(int numberOfProductNeeded, int totalNumberOfProducts) {
        Set<Integer> generatedNumbers = new HashSet<>();
        while (generatedNumbers.size() < numberOfProductNeeded) {  // 3 numbers of 25 total
            int randomNumber = generateRandom(totalNumberOfProducts); // generate random value
            generatedNumbers.add(randomNumber); // add value to SET >> ignore if duplicated
        }
        return generatedNumbers;
    }


    //TODO : Waits for the current URL to match the expected URL.
    public static boolean verifyURL(WebDriver driver, String expectedUrl) {
        try {
            generalWait(driver).until(ExpectedConditions.urlToBe(expectedUrl));
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    //TODO: Get the latest (most recently modified) file from a folder
    public static File getLatestFile(String folderPath) {
        File folder = new File(folderPath);
        File[] files = folder.listFiles();
        assert files != null;
        if (files.length == 0)
            return null;
        Arrays.sort(files, Comparator.comparingLong(File::lastModified).reversed());
        return files[0];
    }

    //TODO: Retrieve all cookies from the current WebDriver session
    public static Set<Cookie> getAllCookies(WebDriver driver) {
        return driver.manage().getCookies();
    }

    //TODO: Set cookies in the current WebDriver session
    public static void restoreSession(WebDriver driver, Set<Cookie> cookies) {
        for (Cookie cookie : cookies) {
            driver.manage().addCookie(cookie);
        }
    }

    //TODO: Upload a file using the input element (type="file")
    public static void uploadingFile(WebDriver driver, By locator, String path) {
        driver.findElement(locator).sendKeys(path);  //tagName --> input & type --> file
    }
}


============================================================
FILE: src/main/resources/allure.properties
============================================================
allure.results.directory=Test-outputs/target/allure-results


============================================================
FILE: src/main/resources/log4j2.properties
============================================================
# Log files location
property.basePath=Test-outputs/Logs
appender=file, stdout
# Define the file appender
appender.file.type=File
appender.file.name=fileAppender
appender.file.fileName=${basePath}/log_${date:yyyy-MM-dd_hh-mm-ss a}.log
appender.file.layout.type=PatternLayout
appender.file.layout.pattern=[%level] %d{dd-MM-yyyy HH:mm:ss} [%t] [%c] - %msg%n
# Define the stdout appender
appender.stdout.type=Console
appender.stdout.name=consoleAppender
appender.stdout.layout.type=PatternLayout
appender.stdout.layout.pattern=[%level] %d{dd-MM-yyyy HH:mm:ss} [%t] [%c]  - %msg%n
# Configure root logger
rootLogger.level=TRACE
rootLogger.appenderRef.file.ref=fileAppender
rootLogger.appenderRef.stdout.ref=consoleAppender

============================================================
FILE: src/test/java/Listeners/IInvokedListenersClass.java
============================================================
package Listeners;

import Utilities.LogsUtils;
import Utilities.Utility;
import io.qameta.allure.Allure;
import org.testng.IInvokedMethod;
import org.testng.IInvokedMethodListener;
import org.testng.ITestContext;
import org.testng.ITestResult;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import static DriverFactory.DriverFactory.getDriver;


public class IInvokedListenersClass implements IInvokedMethodListener {
    public void beforeInvocation(IInvokedMethod method, ITestResult testResult, ITestContext context) {

    }

    public void afterInvocation(IInvokedMethod method, ITestResult testResult, ITestContext context) {
        // Utility.takingFullscreenShot(getDriver(), new P02_landingPage(getDriver()).getNumberOfProductsOnCartIcon());
        File logFile = Utility.getLatestFile(LogsUtils.logsPath);
        try {
            assert logFile != null;
            Allure.addAttachment("logs.log", Files.readString(Path.of(logFile.getPath())));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        if (testResult.getStatus() == ITestResult.FAILURE) {
            LogsUtils.info("test case " + testResult.getName() + " failed");
            Utility.takingScreenShot(getDriver(), testResult.getName()); // testResult.getName() --> get the name of test result and name the screenshot with
            //Utility.takingFullscreenShot(getDriver(), new P02_landingPage(getDriver()).getNumberOfProductsOnCartIcon());
        }
    }
}


============================================================
FILE: src/test/java/Listeners/ITestListenersClass.java
============================================================
package Listeners;

import Utilities.LogsUtils;
import org.testng.ITestListener;
import org.testng.ITestResult;

public class ITestListenersClass implements ITestListener {
    public void onTestStart(ITestResult result) {
        LogsUtils.info("test case " + result.getName() + " Started");
    }

    public void onTestSuccess(ITestResult result) {
        LogsUtils.info("test case " + result.getName() + " Succeed");

    }
    public void onTestSkipped(ITestResult result) {
        LogsUtils.info("test case " + result.getName() + " Skipped");

    }
}


============================================================
FILE: src/test/java/Tests/TC01_LogInTest.java
============================================================
package Tests;

import Pages.P01_LogInPage;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Utilities.DataUtils.getJsonData;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.implicitWait;
import static Utilities.Utility.waitForLoaderToDisappear;
import static org.bouncycastle.util.Properties.getPropertyValue;

import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC01_LogInTest {

    public static final String USERNAME = getJsonData("validLogin", "usernameValue");
    public static final String PASSWORD = getJsonData("validLogin", "passWordValue");
    SoftAssert softAssert = new SoftAssert();

    @BeforeMethod
    public void setup() throws IOException {
        //String browser = System.getProperty("browser") != null ? System.getProperty("browser") : getPropertyValue("environment", "Browser");
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        waitForLoaderToDisappear(getDriver());

    }

    //TODO : Add a test for valid Username and Password
    @Test
    public void validLogInTC() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick();
        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "HomePage_URL"),
                "The user is not redirected to the home page after logging in with valid credentials.");
        info("The user is redirected to the home page after logging in with valid credentials.");
    }


    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC02_HomeTest.java
============================================================
package Tests;

import Pages.P01_LogInPage;
import Pages.P02_HomePage;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Utilities.DataUtils.getJsonData;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.implicitWait;
import static Utilities.Utility.waitForLoaderToDisappear;

import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC02_HomeTest {

    private final String USERNAME = getJsonData("validLogin", "usernameValue");
    private final String PASSWORD = getJsonData("validLogin", "passWordValue");
    private final String CATEGORY = getJsonData("ContactUsData", "category");
    private final String PRODUCT = getJsonData("ContactUsData", "product");
    private final String EMAIL = getJsonData("ContactUsData", "Email");
    private final String SUBJECT = getJsonData("ContactUsData", "subject");

    private final String searchText = "HP";

    SoftAssert softAssert = new SoftAssert();

    @BeforeMethod
    public void setup() throws IOException {
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        waitForLoaderToDisappear(getDriver());

    }

    //TODO : Add a test for Shopping Cart Button
    @Test
    public void checkShoppingCartButton() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnShoppingCart();
        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "shoppingCart_URL"),
                "Shopping cart button did not navigate to the shopping cart page.");
        info("Navigated to the shopping cart page successfully.");
    }

    //TODO : Add a test for the Search bar with search icon
    @Test
    public void checkSearchBarAndSearchIcon() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnSearchIcon()
                .enterDataToSearchBar(searchText);

        softAssert.assertTrue(new P02_HomePage(getDriver()).isSearchResultLabelDisplayedWithText(searchText),
                "Search result label does not contain the expected text.");
        info("Search bar with search icon displays correct search result label.");
        softAssert.assertTrue(getDriver().getCurrentUrl().contains("search"),
                "Current URL does not contain 'search' after searching.");
        info("Search bar with search icon displays correct search result label.");
        softAssert.assertAll();
    }

    //TODO : Add a test for Navigating to Laptops category
    @Test
    public void checkLaptopsCategoryLink() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick().clickOnLaptopsCategory();
        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "LaptopsCategory")
                ,"Laptops category URL mismatch");
        info("Navigated to Laptops category successfully.");
    }


    //TODO : Add a test for Navigating to Speakers category
    @Test
    public void checkSpeakersCategoryLink() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick().clickOnSpeakersCategory();
        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "SpeakersCategory"),
                "Speakers category URL mismatch");
        info("Navigated to Speakers category successfully.");
    }

    //TODO : Add a test for Navigating to Tablets category
    @Test
    public void checkTabletsCategoryLink() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick().clickOnTabletsCategory();
        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "TabletsCategory"),
                "Tablets category URL mismatch");
        info("Navigated to Tablets category successfully.");
    }

    //TODO : Add a test for Navigating to Headphones category
    @Test
    public void checkHeadphonesCategoryLink() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick().clickOnHeadphonesCategory();
        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "HeadphonesCategory"),
                "Headphones category URL mismatch");
        info("Navigated to Headphones category successfully.");
    }

    //TODO : Add a test for Navigating to Mice category
    @Test
    public void checkMiceCategoryLink() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick().clickOnMiceCategory();
        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "MiceCategory"),
                "Mice category URL mismatch");
        info("Navigated to Mice category successfully.");
    }

    //TODO : Add a test for the See Offer button navigation
    @Test
    public void checkSeeOfferButton() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnSeeOfferButton();
        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "OFFERSPage_URL"),
                "See Offer button did not navigate to the laptops category.");
        info("Navigated to laptops category via See Offer button successfully.");
    }

    //TODO : Add a test for the POPULAR ITEMS section
    @Test
    public void checkPopularItemsSectionFirstItem() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnPopularItem1();

        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_ELITEPAD_1000_G2_TABLET"),
                "Popular item 1 did not navigate to the expected product page.");
    }

    //TODO : Add a test for the POPULAR ITEMS section
    @Test
    public void checkPopularItemsSectionSecondItem() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnPopularItem2();

        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_ELITEBOOK_FOLIO"),
                "Popular item 1 did not navigate to the expected product page.");
    }

    //TODO : Add a test for the POPULAR ITEMS section
    @Test
    public void checkPopularItemsSectionThirdItem() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnPopularItem3();

        Assert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_ROAR_PLUS_WIRELESS_SPEAKER"),
                "Popular item 1 did not navigate to the expected product page.");
    }

    //TODO : Add a test for the CONTACT US section
    @Test
    public void checkContactUsSection() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .selectCategoryListBoxContactUs("Laptops")
                .selectProductListBoxContactUs("HP Chromebook 14 G1(ENERGY STAR)")
                .sendEmailContactUs(EMAIL)
                .sendSubjectTextareaContactUs(SUBJECT)
                .clickOnContactUsSendButton();


        Assert.assertTrue(new P02_HomePage(getDriver()).isContactUsSuccessMessageDisplayed(),
                "Contact Us success message was not displayed.");
    }


    //TODO : Add a test for the CONTACT US section
    @Test
    public void checkGoUpIconAndContinueShoppingButton() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .selectCategoryListBoxContactUs("Laptops")
                .selectProductListBoxContactUs("HP Chromebook 14 G1(ENERGY STAR)")
                .sendEmailContactUs(EMAIL)
                .sendSubjectTextareaContactUs(SUBJECT)
                .clickOnContactUsSendButton()
                .clickOngoUpIcon()
                        .clickOnContinueShoppingButton();



        Assert.assertTrue(new P02_HomePage(getDriver()).isContactUsSuccessMessageDisplayed(),
                "Contact Us success message was not displayed.");
    }

    //TODO : Add a test for the Home Footer
    @Test
    public void checkFooterSocialLinks() throws IOException {
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick();
        info("All social media footer links are displayed.");
        softAssert.assertTrue(new P02_HomePage(getDriver()).isFacebookLinkDisplayed(), "Facebook link not displayed.");
        softAssert.assertTrue(new P02_HomePage(getDriver()).isTwitterLinkDisplayed(), "Twitter link not displayed.");
        softAssert.assertTrue(new P02_HomePage(getDriver()).isLinkedinLinkDisplayed(), "LinkedIn link not displayed.");
        info( "Checking footer social media links hrefs...");
        softAssert.assertEquals(new P02_HomePage(getDriver()).getFacebookLinkHref(), getPropertyData("environment", "facebookLink"), "Facebook href invalid.");
        softAssert.assertEquals(new P02_HomePage(getDriver()).getTwitterLinkHref(), getPropertyData("environment", "twitterLink"), "Twitter href invalid.");
        softAssert.assertEquals(new P02_HomePage(getDriver()).getLinkedinLinkHref(), getPropertyData("environment", "linkedinLink"), "LinkedIn href invalid.");
        info("Clicking on footer social media links to verify navigation...");
        softAssert.assertEquals(new P02_HomePage(getDriver()).clickOnFacebookLink(), getPropertyData("environment", "facebookLink"), "Facebook href invalid.");
        softAssert.assertEquals(new P02_HomePage(getDriver()).clickOnTwitterLink(), getPropertyData("environment", "twitterLink"), "Twitter href invalid.");
        softAssert.assertEquals(new P02_HomePage(getDriver()).clickOnLinkedinLink(), getPropertyData("environment", "linkedinLink"), "LinkedIn href invalid.");


        info("All social media footer links are displayed and have valid hrefs and navigation.");
        softAssert.assertAll();
    }

    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC03_LaptopsTest.java
============================================================
package Tests;

import Pages.P02_HomePage;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.implicitWait;
import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC03_LaptopsTest {
    SoftAssert softAssert = new SoftAssert();

    @BeforeMethod
    public void setup() throws IOException {
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        //waitForLoaderToDisappear(getDriver());

    }

    @Test
    public void navigateToLaptopsCategory() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15t()
                .clickOnLaptopsPageBack()
                .clickOnHP_Pavilion_15z()
                .clickOnAddToCartButton().clickOnShoppingCart();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "shoppingCart_URL"),
                "The user is not redirected to the shopping cart page after adding a product to the cart.");
        info("The user is redirected to the shopping cart page after adding a product to the cart.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to the New Design section
    @Test
    public void exploreTheNewDesignSection() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnNewDesignBuyNowButton();

        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "BUY_NOW"),
                "The user is not redirected to the THE NEW DESIGN page after clicking on the 'Buy Now' button.");
        info("The user is redirected to the THE NEW DESIGN page after clicking on the 'Buy Now' button.");
        softAssert.assertAll();
    }


    //TODO : Verify navigation to HP Chromebook 14 G1 (ENERGY STAR) product page
    @Test
    public void laptop_HP_Chromebook_14G1_EnergyStar_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR();

        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPCHROMEBOOK14G1(ENERGYSTAR)"),
                "Not redirected to the HP Chromebook 14 G1 (ENERGY STAR) product page.");
                info("The user is redirected to the HP Chromebook 14 G1 (ENERGY STAR) product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP Chromebook 14 G1 (ES) product page
    @Test
    public void laptop_HP_Chromebook_14G1_ES_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ES();

        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPCHROMEBOOK14G1(ES)"),
                "Not redirected to the HP Chromebook 14 G1 (ES) product page.");
        info("The user is redirected to the HP Chromebook 14 G1 (ES) product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP ENVY - 17T TOUCH LAPTOP product page
    @Test
    public void laptop_HP_ENVY_17T_Touch_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_ENVY_17t();

        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPENVY-17TTOUCHLAPTOP"),
                "Not redirected to the HP ENVY - 17T TOUCH LAPTOP product page.");
        info("The user is redirected to the HP ENVY - 17T TOUCH LAPTOP product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP ENVY X360 - 15T LAPTOP product page
    @Test
    public void laptop_HP_ENVY_X360_15T_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_ENVY_x360();

        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPENVYX360-15TLAPTOP"),
                "Not redirected to the HP ENVY X360 - 15T LAPTOP product page.");
        info("The user is redirected to the HP ENVY X360 - 15T LAPTOP product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP PAVILION 15T TOUCH LAPTOP product page
    @Test
    public void laptop_HP_Pavilion_15T_Touch_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15t();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPPAVILION15TTOUCHLAPTOP"),
                "Not redirected to the HP PAVILION 15T TOUCH LAPTOP product page.");
        info("The user is redirected to the HP PAVILION 15T TOUCH LAPTOP product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP PAVILION 15Z LAPTOP product page
    @Test
    public void laptop_HP_Pavilion_15Z_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15z();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPPAVILION15ZLAPTOP"),
                "Not redirected to the HP PAVILION 15Z LAPTOP product page.");
        info("The user is redirected to the HP PAVILION 15Z LAPTOP product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP PAVILION 15Z TOUCH LAPTOP product page
    @Test
    public void laptop_HP_Pavilion_15Z_Touch_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15z_Touch();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPPAVILION15ZTOUCHLAPTOP"),
                "Not redirected to the HP PAVILION 15Z TOUCH LAPTOP product page.");
        info("The user is redirected to the HP PAVILION 15Z TOUCH LAPTOP product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP PAVILION X360 - 11T TOUCH LAPTOP product page
    @Test
    public void laptop_HP_Pavilion_X360_11T_Touch_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_x360_11t_Touch();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPPAVILIONX360-11TTOUCHLAPTOP"),
                "Not redirected to the HP PAVILION X360 - 11T TOUCH LAPTOP product page.");
        info("The user is redirected to the HP PAVILION X360 - 11T TOUCH LAPTOP product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP SPECTRE X360 - 13-4102DX product page
    @Test
    public void laptop_HP_Spectre_X360_13_4102DX_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Spectre_x360();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPSPECTREX360-13-4102DX"),
                "Not redirected to the HP SPECTRE X360 - 13-4102DX product page.");
        info("The user is redirected to the HP SPECTRE X360 - 13-4102DX product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP STREAM - 11-D020NR LAPTOP product page
    @Test
    public void laptop_HP_Stream_11_D020NR_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Stream_11();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPSTREAM-11-D020NRLAPTOP"),
                "Not redirected to the HP STREAM - 11-D020NR LAPTOP product page.");
        info("The user is redirected to the HP STREAM - 11-D020NR LAPTOP product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP ZBOOK 17 G2 MOBILE WORKSTATION product page
    @Test
    public void laptop_HP_ZBook_17_G2_Mobile_Workstation_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_ZBook_17();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPZBOOK17G2MOBILEWORKSTATION"),
                "Not redirected to the HP ZBOOK 17 G2 MOBILE WORKSTATION product page.");
        info("The user is redirected to the HP ZBOOK 17 G2 MOBILE WORKSTATION product page.");
        softAssert.assertAll();
    }


    @AfterMethod
        public void quit() {
            quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC04_HeadphonesTest.java
============================================================
package Tests;

import Pages.P02_HomePage;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.implicitWait;
import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC04_HeadphonesTest {

    SoftAssert softAssert = new SoftAssert();

    @BeforeMethod
    public void setup() throws IOException {
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        //waitForLoaderToDisappear(getDriver());
    }


    @Test
    public void chooseProductFromHeadphonesCategoryTC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnHeadphonesCategory()
                .clickOnHP_H2310_In_Ear();

        softAssert.assertTrue(getDriver().getCurrentUrl().contains("product"),
                "Current URL does not contain 'product'");
    }


    @Test
    public void exploreFeelYourMusicSection() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnHeadphonesCategory()
                .clickOn_FEEL_YOUR_MUSIC_BuyNowButton();

        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "FEEL_YOUR_MUSIC_BUYNOW"),
                "The user is not redirected to the FEEL YOUR MUSIC page after clicking on the 'Buy Now' button.");
        info("The user is redirected to the FEEL YOUR MUSIC page after clicking on the 'Buy Now' button.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to BEATS STUDIO 2 OVER-EAR MATTE BLACK HEADPHONES product page
    @Test
    public void headphones_Beats_Studio2_OverEar_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnHeadphonesCategory()
                .clickOnBeats_Studio_2_OverEar();

        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "BEATS_STUDIO_2_OVER-EAR_MATTE_BLACK_HEADPHONES"),
                "The user is not redirected to the BEATS STUDIO 2 OVER-EAR MATTE BLACK HEADPHONES product page.");
        info("The user is redirected to the BEATS STUDIO 2 OVER-EAR MATTE BLACK HEADPHONES product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to BOSE SOUNDLINK AROUND-EAR WIRELESS HEADPHONES II product page
    @Test
    public void headphones_Bose_SoundLink_AroundEar_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnHeadphonesCategory()
                .clickOnBose_SoundLink_Around_Ear();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "BOSE_SOUNDLINK_AROUND-EAR_WIRELESS_HEADPHONES_II"),
                "The user is not redirected to the BOSE SOUNDLINK AROUND-EAR WIRELESS HEADPHONES II product page.");
        info("The user is redirected to the BOSE SOUNDLINK AROUND-EAR WIRELESS HEADPHONES II product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP H2310 IN-EAR HEADSET product page
    @Test
    public void headphones_HP_H2310_InEar_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnHeadphonesCategory()
                .clickOnHP_H2310_In_Ear();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_H2310_IN-EAR_HEADSET"),
                "The user is not redirected to the HP H2310 IN-EAR HEADSET product page.");
        info("The user is redirected to the HP H2310 IN-EAR HEADSET product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to LOGITECH USB HEADSET H390 product page
    @Test
    public void headphones_Logitech_USB_Headset_H390_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnHeadphonesCategory()
                .clickOnLogitech_USB_Headset_H390();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "LOGITECH_USB_HEADSET_H390"),
                "The user is not redirected to the LOGITECH USB HEADSET H390 product page.");
        info("The user is redirected to the LOGITECH USB HEADSET H390 product page.");
        softAssert.assertAll();
    }


    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC05_TabletsTest.java
============================================================
package Tests;

import Pages.P02_HomePage;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.implicitWait;
import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC05_TabletsTest {
    SoftAssert softAssert = new SoftAssert();

    @BeforeMethod
    public void setup() throws IOException {
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        //waitForLoaderToDisappear(getDriver());

    }

    //TODO : Verify navigation to TRAVEL CONFIDENTLY AND IN STYLE section
    @Test
    public void exploreTravelConfidentlyAndInStyleSection() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnTabletsCategory()
                .clickOnTravelConfidentlyBuyNowButton();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "TRAVEL_CONFIDENTLY_BUYNOW"),
                "The user is not redirected to the TRAVEL CONFIDENTLY AND IN STYLE page after clicking on the 'Buy Now' button.");
        info("The user is redirected to the TRAVEL CONFIDENTLY AND IN STYLE page after clicking on the 'Buy Now' button.");
        softAssert.assertAll();
    }
    //TODO : Verify navigation to HP ELITEPAD 1000 G2 TABLET product page
    @Test
    public void tablets_HP_ElitePad_1000_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnTabletsCategory()
                .clickOnHP_ElitePad_1000();

        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPELITEPAD_1000_G2_TABLET"),
                "The user is not redirected to the HP ELITEPAD 1000 G2 TABLET product page.");
        info("The user is redirected to the HP ELITEPAD 1000 G2 TABLET product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP ELITE X2 1011 G1 TABLET product page
    @Test
    public void tablets_HP_Elite_x2_1011_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnTabletsCategory()
                .clickOnHP_Elite_x2_1011();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_ELITE_X2_1011_G1_TABLET"),
                "The user is not redirected to the HP ELITE X2 1011 G1 TABLET product page.");
        info("The user is redirected to the HP ELITE X2 1011 G1 TABLET product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP PRO TABLET 608 G1 product page
    @Test
    public void tablets_HP_Pro_Tablet_608_TC() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnTabletsCategory()
                .clickOnHP_Pro_Tablet_608();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_PRO_TABLET_608_G1"),
                "The user is not redirected to the HP PRO TABLET 608 G1 product page.");
        info("The user is redirected to the HP PRO TABLET 608 G1 product page.");
        softAssert.assertAll();
    }




    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC06_SpeakersTest.java
============================================================
package Tests;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.implicitWait;
import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC06_SpeakersTest {

    SoftAssert softAssert = new SoftAssert();

    @BeforeMethod
    public void setup() throws IOException {
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        //waitForLoaderToDisappear(getDriver());

    }

    //TODO : Verify navigation to ENJOY PREMIUM SOUND section
    @Test
    public void exploreEnjoyPremiumSoundSection() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnSpeakersCategory()
                .clickOnEnjoyPremiumSoundBuyNowButton();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "ENJOY_PREMIUM_SOUND_BUYNOW"),
                "The user is not redirected to the ENJOY PREMIUM SOUND page after clicking on the 'Buy Now' button.");
        info("The user is redirected to the ENJOY PREMIUM SOUND page after clicking on the 'Buy Now' button.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to BOSE SOUNDLINK BLUETOOTH SPEAKER III product page
    @Test
    public void speakers_BoseSoundlinkBluetoothSpeaker_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnSpeakersCategory()
                .clickOnBoseSoundlinkBluetoothSpeaker();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "BOSE_SOUNDLINK_BLUETOOTH_SPEAKER_III"),
                "The user is not redirected to the BOSE SOUNDLINK BLUETOOTH SPEAKER III product page.");
        info("The user is redirected to the BOSE SOUNDLINK BLUETOOTH SPEAKER III product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to BOSE SOUNDLINK WIRELESS SPEAKER product page
    @Test
    public void speakers_BoseSoundLinkWirelessSpeaker_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnSpeakersCategory()
                .clickOnBoseSoundLinkWirelessSpeaker();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "BOSE_SOUNDLINK_WIRELESS_SPEAKER"),
                "The user is not redirected to the BOSE SOUNDLINK WIRELESS SPEAKER product page.");
        info("The user is redirected to the BOSE SOUNDLINK WIRELESS SPEAKER product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP ROAR MINI WIRELESS SPEAKER product page
    @Test
    public void speakers_HPRoarMiniWirelessSpeaker_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnSpeakersCategory()
                .clickOnHPRoarMiniWirelessSpeaker();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_ROAR_MINI_WIRELESS_SPEAKER"),
                "The user is not redirected to the HP ROAR MINI WIRELESS SPEAKER product page.");
        info("The user is redirected to the HP ROAR MINI WIRELESS SPEAKER product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP ROAR PLUS WIRELESS SPEAKER product page
    @Test
    public void speakers_HPRoarPlusWirelessSpeaker_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnSpeakersCategory()
                .clickOnHPRoarPlusWirelessSpeaker();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPROAR_PLUS_WIRELESS_SPEAKER"),
                "The user is not redirected to the HP ROAR PLUS WIRELESS SPEAKER product page.");
        info("The user is redirected to the HP ROAR PLUS WIRELESS SPEAKER product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP ROAR WIRELESS SPEAKER product page
    @Test
    public void speakers_HPRoarWirelessSpeaker_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnSpeakersCategory()
                .clickOnHPRoarWirelessSpeaker();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_ROAR_WIRELESS_SPEAKER"),
                "The user is not redirected to the HP ROAR WIRELESS SPEAKER product page.");
        info("The user is redirected to the HP ROAR WIRELESS SPEAKER product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP S9500 BLUETOOTH WIRELESS SPEAKER product page
    @Test
    public void speakers_HPS9500BluetoothWirelessSpeaker_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnSpeakersCategory()
                .clickOnHPS9500BluetoothWirelessSpeaker();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_S9500_BLUETOOTH_WIRELESS_SPEAKER"),
                "The user is not redirected to the HP S9500 BLUETOOTH WIRELESS SPEAKER product page.");
        info("The user is redirected to the HP S9500 BLUETOOTH WIRELESS SPEAKER product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to LOGITECH X100 SPEAKER SYSTEM product page
    @Test
    public void speakers_LogitechX100SpeakerSystem_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnSpeakersCategory()
                .clickOnLogitechX100SpeakerSystem();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "LOGITECH_X100_SPEAKER_SYSTEM-WIRELESS_SPEAKER(S)"),
                "The user is not redirected to the LOGITECH X100 SPEAKER SYSTEM product page.");
        info("The user is redirected to the LOGITECH X100 SPEAKER SYSTEM product page.");
        softAssert.assertAll();
    }


    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC07_MiceTest.java
============================================================
package Tests;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.implicitWait;
import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC07_MiceTest {
    SoftAssert softAssert = new SoftAssert();

    @BeforeMethod
    public void setup() throws IOException {
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        //waitForLoaderToDisappear(getDriver());

    }
    //TODO : Verify navigation to DISCOVER OUR WIRELESS MICE section
    @Test
    public void exploreDiscoverOurWirelessMiceSection() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnDiscoverOurWirelessMiceBuyNowButton();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "DISCOVER_OUR_WIRELESS_MICE_BUYNOW"),
                "The user is not redirected to the DISCOVER OUR WIRELESS MICE page after clicking on the 'Buy Now' button.");
        info("The user is redirected to the DISCOVER OUR WIRELESS MICE page after clicking on the 'Buy Now' button.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP USB 3.0 Button Optical Mouse product page
    @Test
    public void mice_HP_USB_3_Button_OpticalMouse_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnHP_USB_3_Button_OpticalMouse();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_USB_3_BUTTON_OPTICAL_MOUSE"),
                "The user is not redirected to the HP USB 3.0 Button Optical Mouse product page.");
        info("The user is redirected to the HP USB 3.0 Button Optical Mouse product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP Z3200 Wireless Mouse product page
    @Test
    public void mice_HP_Z3200_Wireless_Mouse_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnHP_Z3200_Wireless_Mouse();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_Z3200_WIRELESS_MOUSE"),
                "The user is not redirected to the HP Z3200 Wireless Mouse product page.");
        info("The user is redirected to the HP Z3200 Wireless Mouse product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP Z3600 Wireless Mouse product page
    @Test
    public void mice_HP_Z3600_Wireless_Mouse_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnHP_Z3600_Wireless_Mouse();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_Z3600_WIRELESS_MOUSE"),
                "The user is not redirected to the HP Z3600 Wireless Mouse product page.");
        info("The user is redirected to the HP Z3600 Wireless Mouse product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP Z4000 Wireless Mouse product page
    @Test
    public void mice_HP_Z4000_Wireless_Mouse_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnHP_Z4000_Wireless_Mouse();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_Z4000_WIRELESS_MOUSE"),
                "The user is not redirected to the HP Z4000 Wireless Mouse product page.");
        info("The user is redirected to the HP Z4000 Wireless Mouse product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to HP Z8000 Bluetooth Mouse product page
    @Test
    public void mice_HP_Z8000_Bluetooth_Mouse_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnHP_Z8000_Bluetooth_Mouse();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HP_Z8000_BLUETOOTH_MOUSE"),
                "The user is not redirected to the HP Z8000 Bluetooth Mouse product page.");
        info("The user is redirected to the HP Z8000 Bluetooth Mouse product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to Kensington Orbit 72352 Trackball product page
    @Test
    public void mice_Kensington_Orbit_72352_Trackball_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnKensington_Orbit_72352_Trackball();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "KENSINGTON_ORBIT_72352_TRACKBALL"),
                "The user is not redirected to the Kensington Orbit 72352 Trackball product page.");
        info("The user is redirected to the Kensington Orbit 72352 Trackball product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to Kensington Orbit 72337 Trackball product page
    @Test
    public void mice_Kensington_Orbit_72337_Trackball_TC() throws IOException{
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnKensington_Orbit_72337_Trackball();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "KENSINGTON_ORBIT_72337_TRACKBALL_WITH_SCROLL_RING"),
                "The user is not redirected to the Kensington Orbit 72337 Trackball product page.");
        info("The user is redirected to the Kensington Orbit 72337 Trackball product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to Logitech G502 Proteus Core product page
    @Test
    public void mice_Logitech_G502_Proteus_Core_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnLogitech_G502_Proteus_Core();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "LOGITECH_G502_PROTEUS_CORE"),
                "The user is not redirected to the Logitech G502 Proteus Core product page.");
        info("The user is redirected to the Logitech G502 Proteus Core product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to Microsoft Sculpt Touch Mouse product page
    @Test
    public void mice_Microsoft_Sculpt_Touch_Mouse_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnMicrosoft_Sculpt_Touch_Mouse();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "MICROSOFT_SCULPT_TOUCH_MOUSE"),
                "The user is not redirected to the Microsoft Sculpt Touch Mouse product page.");
        info("The user is redirected to the Microsoft Sculpt Touch Mouse product page.");
        softAssert.assertAll();
    }

    //TODO : Verify navigation to silly meerkat product page
    @Test
    public void mice_silly_meerkat_TC() throws IOException {
        new Pages.P02_HomePage(getDriver())
                .clickOnMiceCategory()
                .clickOnSillyMeerkat();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "SILLY_MEERKAT"),
                "The user is not redirected to the silly meerkat product page.");
        info("The user is redirected to the silly meerkat product page.");
        softAssert.assertAll();
    }



    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC08_ProductSpecificationsTest.java
============================================================
package Tests;

import Pages.P02_HomePage;
import Pages.P08_ProductSpecificationsPage;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.implicitWait;
import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC08_ProductSpecificationsTest {

    SoftAssert softAssert = new SoftAssert();

    @BeforeMethod
    public void setup() throws IOException {
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        //waitForLoaderToDisappear(getDriver());

    }

    //TODO : Verify navigation to the Product Specifications page
    @Test
    public void navigateToProductSpecificationsPage() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15t();

        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("ProductsLinks", "HPPAVILION15TTOUCHLAPTOP"),
                "The user is not redirected to the Product Specifications page after clicking on product link.");
        info("The user is redirected to the Product Specifications page after clicking on the 'Add to Cart' button.");
        softAssert.assertAll();

    }

    //TODO : Verify the Product Specifications page title
    @Test
    public void verifyProductTitle() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15t();

        softAssert.assertTrue(new P08_ProductSpecificationsPage(getDriver()).isProductTitleEqualTo("HP PAVILION 15T TOUCH LAPTOP"));
        info("The product title matches the expected title.");
        softAssert.assertAll();
    }

    //TODO : Verify the Product Specifications page price
    @Test
    public void verifyProductPrice() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15t();

        softAssert.assertTrue(new P08_ProductSpecificationsPage(getDriver()).isProductPriceEqualTo("$519.99"));
        info("The product price matches the expected price.");
        softAssert.assertAll();
    }

    //TODO : Verify the color Radio Buttons of the Product Specifications page
    @Test
    public void verifyColorRadioButtons() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15t()
                .clickSecondColorRadioButton();
        softAssert.assertTrue(new P08_ProductSpecificationsPage(getDriver()).isSecondColorSelected(),
                "The second color radio button is not selected.");
        info("The second color radio button is selected.");

        new P08_ProductSpecificationsPage(getDriver())
                .clickFirstColorRadioButton();
        softAssert.assertTrue(new P08_ProductSpecificationsPage(getDriver()).isFirstColorSelected(),
                "The first color radio button is not selected.");
        info("The first color radio button is selected.");

        new P08_ProductSpecificationsPage(getDriver())
                .clickThirdColorRadioButton();
        softAssert.assertTrue(new P08_ProductSpecificationsPage(getDriver()).isThirdColorSelected(),
                "The third color radio button is not selected.");
        info("The third color radio button is selected.");

        softAssert.assertAll();
    }
    //TODO : Verify the Product Specifications page Quantity input field
    @Test
    public void verifyIncrementQuantity() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15t()
                .clickOnAddQuantityButton(2);
        softAssert.assertEquals(new P08_ProductSpecificationsPage(getDriver()).getQuantityNumber(), "3",
                "The quantity input field is not equal to 3.");
        info("The quantity input field is equal to 3.");

        softAssert.assertTrue(new P08_ProductSpecificationsPage(getDriver()).isQuantityInputFieldEqualTo("3"),
                "The quantity input field is not equal to 3.");

        softAssert.assertAll();
    }

    @Test
    public void verifyMunisQuantity() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15t()
                .clickOnAddQuantityButton(3)
                .clickOnSubtractQuantityButton(2);
        softAssert.assertEquals(new P08_ProductSpecificationsPage(getDriver()).getQuantityNumber(), "2",
                "The quantity input field is not equal to 2.");
        info("The quantity input field is equal to 2.");

        softAssert.assertTrue(new P08_ProductSpecificationsPage(getDriver()).isQuantityInputFieldEqualTo("2"),
                "The quantity input field is not equal to 3.");

        softAssert.assertAll();
    }
    //TODO : Verify the The quantity input field functionality
    @Test
    public void verifyQuantityInputField() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15t()
                .setProductQuantity("5");
        softAssert.assertEquals(new P08_ProductSpecificationsPage(getDriver()).getQuantityNumber(), "5",
                "The quantity input field is not equal to 5.");
        info("The quantity input field is equal to 5.");

        softAssert.assertTrue(new P08_ProductSpecificationsPage(getDriver()).isQuantityInputFieldEqualTo("5"),
                "The quantity input field is not equal to 5.");

        softAssert.assertAll();
    }

    //TODO : Verify the Add to Cart button functionality
    @Test
    public void verifyAddToCartButton() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Pavilion_15t()
                .setProductQuantity("2")
                .clickOnAddToCartButton()
                .clickOnShoppingCart();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "shoppingCart_URL"),
                "The user is not redirected to the Shopping Cart page after clicking on the 'Add to Cart' button.");
        info("The user is redirected to the Shopping Cart page after clicking on the 'Add to Cart' button.");
        softAssert.assertAll();
    }


    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC09_ShoppingCartTest.java
============================================================
package Tests;

import Pages.P01_LogInPage;
import Pages.P02_HomePage;
import Pages.P09_ShoppingCartPage;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Tests.TC01_LogInTest.PASSWORD;
import static Tests.TC01_LogInTest.USERNAME;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.implicitWait;
import static Utilities.Utility.waitForLoaderToDisappear;
import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC09_ShoppingCartTest {

    SoftAssert softAssert = new SoftAssert();

    @BeforeMethod
    public void setup() throws IOException {
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        //waitForLoaderToDisappear(getDriver());

    }
    //TODO: Add test methods for Shopping Cart functionalities
    //TODO: Shopping Cart is empty
    @Test
    public void shoppingCartIsEmpty() {
        new P02_HomePage(getDriver())
                .clickOnShoppingCart();
         softAssert.assertTrue(new P09_ShoppingCartPage(getDriver()).isShoppingCartIsEmptyLabelDisplayed(),
                "Shopping cart is not empty");
        softAssert.assertAll();
    }

    //TODO: Shopping Cart : Continue Shopping Button
    @Test
    public void verifyContinueShoppingButton() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnShoppingCart()
                .clickOnContinueShoppingButton();
        softAssert.assertEquals(getDriver().getCurrentUrl(), getPropertyData("environment", "HomePage_URL"),
                "Continue Shopping button did not redirect to home page");
        softAssert.assertAll();
    }
    //TODO: Shopping Cart : check edit Button
    @Test
    public void verifyEditButton() throws IOException {
        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnProductEditButton_P1()
                .clickSecondColorRadioButton()
                .clickOnAddQuantityButton(3);
        softAssert.assertTrue(getDriver().getCurrentUrl().contains("product/9"));
        info("The user is redirected to the HP Chromebook 14 G1 (ENERGY STAR) product page.");
        softAssert.assertAll();

    }

    //TODO: Shopping Cart : check remove Button
    @Test
    public void verifyRemoveButton() throws IOException {

        new P02_HomePage(getDriver())
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnProductRemoveButton_P1();
        softAssert.assertTrue(new P09_ShoppingCartPage(getDriver()).isShoppingCartIsEmptyLabelDisplayed(),
                "Shopping cart is not empty after removing the product");
        info("The user is redirected to the Shopping Cart page after removing the product.");
        softAssert.assertAll();
    }

    //TODO: Shopping Cart : check Checkout Button
    @Test
    public void verifyCheckoutButton() throws IOException {
        waitForLoaderToDisappear(getDriver());
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnCheckOutButton();
        softAssert.assertEquals(getDriver().getCurrentUrl(),
                getPropertyData("environment", "ORDER_PAYMENT_URL"),
                "The user is not redirected to the Shipping Details page after clicking on the 'Checkout' button.");
        info("The user is redirected to the Shipping Details page after clicking on the 'Checkout' button.");
        softAssert.assertAll();
    }

    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC10_ShippingDetailsTest.java
============================================================
package Tests;

import Pages.P01_LogInPage;
import Pages.P10_ShippingDetailsPage;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Tests.TC01_LogInTest.PASSWORD;
import static Tests.TC01_LogInTest.USERNAME;
import static Utilities.DataUtils.getJsonData;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.implicitWait;
import static Utilities.Utility.waitForLoaderToDisappear;
import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC10_ShippingDetailsTest {
    SoftAssert softAssert = new SoftAssert();
    public static final String FIRSTNAME = getJsonData("validRegister", "firstName");
    public static final String LASTNAME = getJsonData("validRegister", "lastName");
    public static final String PHONE_NUMBER = getJsonData("validRegister", "PhoneNumber");
    public static final String COUNTRY_LISTBOX= getJsonData("validRegister", "Country");
    public static final String CITY= getJsonData("validRegister", "City");
    public static final String ADDRESS= getJsonData("validRegister", "Address");
    public static final String POSTAL_CODE= getJsonData("validRegister", "PostalCode");
    public static final String STATE= getJsonData("validRegister", "state");


    @BeforeMethod
    public void setup() throws IOException {
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 10);
        //waitForLoaderToDisappear(getDriver());
    }
    //TODO :

    @Test
    public void verifyNextButtonInOrderPaymentPage() throws IOException {
        waitForLoaderToDisappear(getDriver());
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnCheckOutButton()
                        .clickOnFirstNextButtonInShippingDetails();

        softAssert.assertTrue(new P10_ShippingDetailsPage(getDriver()).isPaymentMethodSectionSelected(),
                "The user is not redirected to the PAYMENT METHOD page after clicking on the 'Next' button.");
        info("The user is redirected to the PAYMENT METHOD page after clicking on the 'Next' button.");
        softAssert.assertAll();
    }
    //TODO : Verify the Shipping Details section is selected
    @Test
    public void verifyShippingDetailsSectionSelected() throws IOException {
        waitForLoaderToDisappear(getDriver());
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnCheckOutButton()
                .clickOnEditShippingDetailsLink();
        softAssert.assertTrue(new P10_ShippingDetailsPage(getDriver()).isShippingDetailsSectionSelected(),
                "The user is not redirected to the PAYMENT METHOD page after clicking on the 'Next' button.");
        info("The user is redirected to the PAYMENT METHOD page after clicking on the 'Next' button.");
        softAssert.assertAll();
    }
    //TODO : Verify the Edit Shipping Details link
    @Test
    public void verifyEditShippingDetailsLink() throws IOException {
        waitForLoaderToDisappear(getDriver());
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnCheckOutButton()
                .clickOnEditShippingDetailsLink();
        softAssert.assertTrue(new P10_ShippingDetailsPage(getDriver()).isShippingDetailsSectionSelected(),
                "The user is not redirected to the SHIPPING DETAILS page after clicking on the 'Edit Shipping Details' link.");
        info("The user is redirected to the SHIPPING DETAILS page after clicking on the 'Edit Shipping Details' link.");
        softAssert.assertAll();
    }
    //TODO : Verify the Back button functionality
    @Test
    public void verifyBackButtonFunctionality() throws IOException {
        waitForLoaderToDisappear(getDriver());
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnCheckOutButton()
                .clickOnEditShippingDetailsLink()
                .clickOnBackButton()
                        .clickOnFirstNextButtonInShippingDetails();
        softAssert.assertTrue(new P10_ShippingDetailsPage(getDriver()).isPaymentMethodSectionSelected(),
                "The user is not redirected to the PAYMENT METHOD page after clicking on the 'Back' button.");
        info("The user is redirected to the PAYMENT METHOD page after clicking on the 'Back' button.");
        softAssert.assertAll();
    }
    //TODO : Verify the Edit Shipping Details functionality in shipping details page
    @Test
    public void verifyEditShippingDetailsFunctionality() throws IOException {
        waitForLoaderToDisappear(getDriver());
        new P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnCheckOutButton()
                .clickOnEditShippingDetailsLink()
                .editFirstName(FIRSTNAME)
                .editLastName(LASTNAME)
                .editPhoneNumber(PHONE_NUMBER)
                .selectCountry(COUNTRY_LISTBOX)
                .editCity(CITY)
                .editAddress(ADDRESS)
                .editPostalCode(POSTAL_CODE)
                .editState(STATE)
                .clickOnSaveChangesCheckBox()
                .clickOnSaveChangesCheckBox()
                .clickOnSecondNextButtonInEditShippingDetails();
        softAssert.assertTrue(new P10_ShippingDetailsPage(getDriver()).isShippingDetailsSectionSelected(),
                "The user is not redirected to the PAYMENT METHOD page after clicking on the 'Save Changes' button.");
        info("The user is redirected to the PAYMENT METHOD page after clicking on the 'Save Changes' button.");
        softAssert.assertAll();
    }


    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC11_PaymentMethodsTest.java
============================================================
package Tests;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Tests.TC01_LogInTest.PASSWORD;
import static Tests.TC01_LogInTest.USERNAME;
import static Utilities.DataUtils.*;
import static Utilities.LogsUtils.*;
import static Utilities.Utility.*;

import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC11_PaymentMethodsTest {

    SoftAssert softAssert = new SoftAssert();

    public static final String SAFEPAY_USERNAME = getJsonData("PaymentData", "SafePay_username");
    public static final String SAFEPAY_PASSWORD = getJsonData("PaymentData", "SafePay_password");
    public static final String MASTERCREDIT_CARDNUMBER = getJsonData("PaymentData", "MasterCredit_CardNumber");
    public static final String MASTERCREDIT_CVV_NUMBER = getJsonData("PaymentData", "MasterCredit_CVV_Number");
    public static final String MASTERCREDIT_CARDHOLDERNAME = getJsonData("PaymentData", "MasterCredit_CardholderName");

    @BeforeMethod
    public void setup() throws IOException {
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        waitForLoaderToDisappear(getDriver());
    }

    //TODO : Verify Back to shipping details Link method
    @Test
    public void verifyBackToShippingDetailsLink() throws IOException {
        new Pages.P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnCheckOutButton()
                .clickOnFirstNextButtonInShippingDetails()
                .clickOnBackToShippingDetailsLink();

        softAssert.assertTrue(new Pages.P10_ShippingDetailsPage(getDriver()).isShippingDetailsSectionSelected(),
                "The user is not redirected to the SHIPPING DETAILS page after clicking on the 'Back to shipping details' link.");
    }

    //TODO : Add test case for SafePay payment method
    @Test
    public void verifySafePayPaymentMethod() throws IOException {
        new Pages.P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnCheckOutButton()
                .clickOnFirstNextButtonInShippingDetails()
                .clickOnPaymentMethodsSafePay()
                .sendSafePayUserName(SAFEPAY_USERNAME)
                .sendSafePayPassword(SAFEPAY_PASSWORD)
                .clickOnSaveChangesCheckBox_SafePay()
                .clickOnSaveChangesCheckBox_SafePay()
                .clickOnPayNowButton_SAFEPAY();

        softAssert.assertTrue(new Pages.P12_OrderSummaryPage(getDriver()).isOrderSummaryPageDisplayed(),
                "The user is not redirected to the Order Summary page after clicking on the 'Pay Now' button using SafePay.");
    }

    //TODO : Add test case for Master credit payment method
    @Test
    public void verifyMasterCreditPaymentMethod() throws IOException {
        new Pages.P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnCheckOutButton()
                .clickOnFirstNextButtonInShippingDetails()
                .clickOnPaymentMethods_MasterCredit()
                .clickOnPaymentMethodsMasterCredit_EditButton()
                .sendMasterCreditCardNumber(MASTERCREDIT_CARDNUMBER)
                .sendMasterCreditCVVNumber(MASTERCREDIT_CVV_NUMBER)
                .sendMasterCreditCardHolderName(MASTERCREDIT_CARDHOLDERNAME)
                .clickOnSaveChangesCheckBox_MasterCredit().clickOnSaveChangesCheckBox_MasterCredit()
                .clickOnPayNowButton_MasterCredit();


        softAssert.assertTrue(new Pages.P12_OrderSummaryPage(getDriver()).isOrderSummaryPageDisplayed(),
                "The user is not redirected to the Order Summary page after clicking on the 'Pay Now' button using Master Credit.");
    }










    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/java/Tests/TC12_OrderSummaryTest.java
============================================================
package Tests;

import Pages.P12_OrderSummaryPage;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;

import static DriverFactory.DriverFactory.*;
import static Tests.TC01_LogInTest.PASSWORD;
import static Tests.TC01_LogInTest.USERNAME;
import static Tests.TC10_ShippingDetailsTest.*;
import static Tests.TC11_PaymentMethodsTest.*;
import static Utilities.DataUtils.getPropertyData;
import static Utilities.LogsUtils.info;
import static Utilities.Utility.*;
import Listeners.IInvokedListenersClass;
import Listeners.ITestListenersClass;

@Listeners({IInvokedListenersClass.class, ITestListenersClass.class})
public class TC12_OrderSummaryTest {

    SoftAssert softAssert = new SoftAssert();

    @BeforeMethod
    public void setup() throws IOException {
        //String browser = System.getProperty("browser") != null ? System.getProperty("browser") : getPropertyValue("environment", "Browser");
        setUpDriver(getPropertyData("environment", "Browser"));
        info("starting Edge browser");
        getDriver().get(getPropertyData("environment", "LoginPage_URL"));
        info("get the URL and loading the page");
        implicitWait(getDriver(), 15);
        waitForLoaderToDisappear(getDriver());

    }

    // TODO : verify Laptops Category Flow
    @Test
    public void verifyEndToEndScenario() throws IOException {
        new Pages.P01_LogInPage(getDriver())
                .clickOnUserMenu()
                .sendUserName(USERNAME)
                .sendPassword(PASSWORD)
                .signInButtonClick()
                .clickOnLaptopsCategory()
                .clickOnHP_Chromebook_ENERGYSTAR()
                .clickOnLaptopsPageBack()
                .clickOnHP_Pavilion_15t()
                .clickOnAddQuantityButton(4)
                .clickOnSubtractQuantityButton(2)
                .clickOnLaptopsPageBack()
                .clickOnHP_Pavilion_x360_11t_Touch()
                .setProductQuantity("3")
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnProductEditButton_P1()
                .clickThirdColorRadioButton()
                .clickOnAddQuantityButton(2)
                .clickOnAddToCartButton()
                .clickOnShoppingCart()
                .clickOnCheckOutButton()
                .clickOnEditShippingDetailsLink()
                .editFirstName(FIRSTNAME)
                .editLastName(LASTNAME)
                .editPhoneNumber(PHONE_NUMBER)
                .selectCountry(COUNTRY_LISTBOX)
                .editCity(CITY)
                .editAddress(ADDRESS)
                .editPostalCode(POSTAL_CODE)
                .editState(STATE)
                .clickOnSaveChangesCheckBox()
                .clickOnSaveChangesCheckBox()
                .clickOnSecondNextButtonInEditShippingDetails()
                .clickOnPaymentMethodsSafePay()
                .sendSafePayUserName(SAFEPAY_USERNAME)
                .clickOnSaveChangesCheckBox_SafePay()
                .clickOnSaveChangesCheckBox_SafePay()
                .clickOnPaymentMethods_MasterCredit()
                .clickOnPaymentMethodsMasterCredit_EditButton()
                .sendMasterCreditCardNumber(MASTERCREDIT_CARDNUMBER)
                .sendMasterCreditCVVNumber(MASTERCREDIT_CVV_NUMBER)
                .sendMasterCreditCardHolderName(MASTERCREDIT_CARDHOLDERNAME)
                .clickOnSaveChangesCheckBox_MasterCredit().clickOnSaveChangesCheckBox_MasterCredit()
                .clickOnPayNowButton_MasterCredit();

        softAssert.assertTrue(new P12_OrderSummaryPage(getDriver()).isOrderSummaryPageDisplayed(),
                "The user is not redirected to the Order Summary page after clicking on the 'Pay Now' button using Master Credit.");
        info("The user is redirected to the Order Summary page after clicking on the 'Pay Now' button using Master Credit.");
        softAssert.assertAll();



    }



    @AfterMethod
    public void quit() {
        quitDriver();
    }
}


============================================================
FILE: src/test/resources/TestData/ContactUsData.json
============================================================
{
  "category": "Laptops",
  "Product": "HP Chromebook 14 G1(ENERGY STAR)",
  "Email": "mohamed.elkhadragy50@gmail.com",
  "subject": "A wise developer once said : We don’t need QA. Developers can test their own code"
}

============================================================
FILE: src/test/resources/TestData/environment.properties
============================================================
Browser=edge
notActiveBrowser=chrome

HomePage_URL=https://advantageonlineshopping.com/#/
shoppingCart_URL=https://advantageonlineshopping.com/#/shoppingCart
LoginPage_URL=https://advantageonlineshopping.com/#/
registerPage_URL=https://advantageonlineshopping.com/#/register
OFFERSPage_URL=https://advantageonlineshopping.com/#/product/3
searchResults=https://advantageonlineshopping.com/#/search/?viewAll=HP
ORDER_PAYMENT_URL=https://advantageonlineshopping.com/#/orderPayment


LaptopsCategory=https://advantageonlineshopping.com/#/category/Laptops/1
HeadphonesCategory=https://advantageonlineshopping.com/#/category/Headphones/2
TabletsCategory=https://advantageonlineshopping.com/#/category/Tablets/3
SpeakersCategory=https://advantageonlineshopping.com/#/category/Speakers/4
MiceCategory=https://advantageonlineshopping.com/#/category/Mice/5

facebookLink=https://www.facebook.com/MicroFocus/
twitterLink=https://twitter.com/MicroFocus
linkedinLink=https://www.linkedin.com/company/1024?trk=tyah&trkInfo=clickedVertical%3Ashowcase%2CclickedEntityId%3A1024%2Cidx%3A2-1-2%2CtarId%3A145431482.327%2Ctas%3Ahewlett%20packard%20enterprise%20software


============================================================
FILE: src/test/resources/TestData/PaymentData.json
============================================================
{
  "SafePay_username": "testuser",
  "SafePay_password": "Test@12345",
  "MasterCredit_CardNumber": "0123 4567 8912",
  "MasterCredit_CVV_Number": "123",
  "MasterCredit_CardholderName": "Motcha Lotcha"
}

============================================================
FILE: src/test/resources/TestData/ProductsLinks.properties
============================================================
HP_ELITEPAD_1000_G2_TABLET=https://advantageonlineshopping.com/#/product/16
HP_ELITEBOOK_FOLIO=https://advantageonlineshopping.com/#/product/10
HP_ROAR_PLUS_WIRELESS_SPEAKER=https://advantageonlineshopping.com/#/product/21

LaptopsCategory=https://advantageonlineshopping.com/#/category/Laptops/1
BUY_NOW=https://advantageonlineshopping.com/#/product/3
HPCHROMEBOOK14G1(ENERGYSTAR)=https://advantageonlineshopping.com/#/product/9
HPCHROMEBOOK14G1(ES)=https://advantageonlineshopping.com/#/product/10
HPENVY-17TTOUCHLAPTOP=https://advantageonlineshopping.com/#/product/7
HPENVYX360-15TLAPTOP=https://advantageonlineshopping.com/#/product/6
HPPAVILION15TTOUCHLAPTOP=https://advantageonlineshopping.com/#/product/1
HPPAVILION15ZLAPTOP=https://advantageonlineshopping.com/#/product/2
HPPAVILION15ZTOUCHLAPTOP=https://advantageonlineshopping.com/#/product/3
HPPAVILIONX360-11TTOUCHLAPTOP=https://advantageonlineshopping.com/#/product/11
HPSPECTREX360-13-4102DX=https://advantageonlineshopping.com/#/product/4
HPSTREAM-11-D020NRLAPTOP=https://advantageonlineshopping.com/#/product/5
HPZBOOK17G2MOBILEWORKSTATION=https://advantageonlineshopping.com/#/product/8

HeadphonesCategory=https://advantageonlineshopping.com/#/category/Headphones/2
FEEL_YOUR_MUSIC_BUYNOW=https://advantageonlineshopping.com/#/product/13
BEATS_STUDIO_2_OVER-EAR_MATTE_BLACK_HEADPHONES=https://advantageonlineshopping.com/#/product/15
BOSE_SOUNDLINK_AROUND-EAR_WIRELESS_HEADPHONES_II=https://advantageonlineshopping.com/#/product/13
HP_H2310_IN-EAR_HEADSET=https://advantageonlineshopping.com/#/product/12
LOGITECH_USB_HEADSET_H390=https://advantageonlineshopping.com/#/product/14

TabletsCategory=https://advantageonlineshopping.com/#/category/Tablets/3
TRAVEL_CONFIDENTLY_BUYNOW=https://advantageonlineshopping.com/#/product/16
HPELITEPAD_1000_G2_TABLET=https://advantageonlineshopping.com/#/product/16
HP_ELITE_X2_1011_G1_TABLET=https://advantageonlineshopping.com/#/product/17
HP_PRO_TABLET_608_G1=https://advantageonlineshopping.com/#/product/18

SpeakersCategory=https://advantageonlineshopping.com/#/category/Speakers/4
ENJOY_PREMIUM_SOUND_BUYNOW=https://advantageonlineshopping.com/#/product/19
BOSE_SOUNDLINK_BLUETOOTH_SPEAKER_III=https://advantageonlineshopping.com/#/product/20
BOSE_SOUNDLINK_WIRELESS_SPEAKER=https://advantageonlineshopping.com/#/product/25
HP_ROAR_MINI_WIRELESS_SPEAKER=https://advantageonlineshopping.com/#/product/24
HPROAR_PLUS_WIRELESS_SPEAKER=https://advantageonlineshopping.com/#/product/21
HP_ROAR_WIRELESS_SPEAKER=https://advantageonlineshopping.com/#/product/22
HP_S9500_BLUETOOTH_WIRELESS_SPEAKER=https://advantageonlineshopping.com/#/product/19
LOGITECH_X100_SPEAKER_SYSTEM-WIRELESS_SPEAKER(S)=https://advantageonlineshopping.com/#/product/23

MiceCategory=https://advantageonlineshopping.com/#/category/Mice/5
DISCOVER_OUR_WIRELESS_MICE_BUYNOW=https://advantageonlineshopping.com/#/product/28
HP_USB_3_BUTTON_OPTICAL_MOUSE=https://advantageonlineshopping.com/#/product/29
HP_Z3200_WIRELESS_MOUSE=https://advantageonlineshopping.com/#/product/28
HP_Z3600_WIRELESS_MOUSE=https://advantageonlineshopping.com/#/product/27
HP_Z4000_WIRELESS_MOUSE=https://advantageonlineshopping.com/#/product/30
HP_Z8000_BLUETOOTH_MOUSE=https://advantageonlineshopping.com/#/product/33
KENSINGTON_ORBIT_72337_TRACKBALL_WITH_SCROLL_RING=https://advantageonlineshopping.com/#/product/32
KENSINGTON_ORBIT_72352_TRACKBALL=https://advantageonlineshopping.com/#/product/26
LOGITECH_G502_PROTEUS_CORE=https://advantageonlineshopping.com/#/product/31
MICROSOFT_SCULPT_TOUCH_MOUSE=https://advantageonlineshopping.com/#/product/34
SILLY_MEERKAT=https://advantageonlineshopping.com/#/product/45






















============================================================
FILE: src/test/resources/TestData/validLogin.json
============================================================
{
  "usernameValue": "Fanta",
  "passWordValue": "el5DraGy"
}

============================================================
FILE: src/test/resources/TestData/validRegister.json
============================================================
{
  "firstName": "Mohamed",
  "lastName": "Essam",
  "Email": "mohamed.elkhadragy50@gmail.com",
  "password": "el5DraGy",
  "Country": "Egypt",
  "City": "Cairo",
  "PhoneNumber": "01012345678",
  "Address": "123 Main St, Cairo",
  "PostalCode": "12345",
  "state": "Maddi"
}

============================================================
FILE: Test Runner/HeadphonesSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="HeadphonesSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="HeadphonesSuite">
        <classes>
            <class name="Tests.TC04_HeadphonesTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/HomeSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="HomeSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="HomeSuite">
        <classes>
            <class name="Tests.TC02_HomeTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/LaptopsSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="LaptopsSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="LaptopsSuite">
        <classes>
            <class name="Tests.TC03_LaptopsTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/LogInSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="LogInSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="LogInSuite">
        <classes>
            <class name="Tests.TC01_LogInTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/MicesSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="MiceSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="MiceSuite">
        <classes>
            <class name="Tests.TC07_MiceTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/OrderSummarySuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="OrderSummarySuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="OrderSummarySuite">
        <classes>
            <class name="Tests.TC12_OrderSummaryTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/PaymentMethodsSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="PaymentMethodsSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="PaymentMethodsSuite">
        <classes>
            <class name="Tests.TC11_PaymentMethodsTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/ProductSpecificationsSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="ProductSpecificationsSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="ProductSpecificationsSuite">
        <classes>
            <class name="Tests.TC08_ProductSpecificationsTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/RegressionSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Regression Suite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="Regression Tests">
        <classes>
            <class name="Tests.TC01_LogInTest"/>
            <class name="Tests.TC02_HomeTest"/>
            <class name="Tests.TC03_LaptopsTest"/>
            <class name="Tests.TC04_HeadphonesTest"/>
            <class name="Tests.TC05_TabletsTest"/>
            <class name="Tests.TC06_SpeakersTest"/>
            <class name="Tests.TC07_MiceTest"/>
            <class name="Tests.TC08_ProductSpecificationsTest"/>
            <class name="Tests.TC09_ShoppingCartTest"/>
            <class name="Tests.TC10_ShippingDetailsTest"/>
            <class name="Tests.TC11_PaymentMethodsTest"/>
            <class name="Tests.TC12_OrderSummaryTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/ShippingDetailsSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="ShippingDetailsSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="ShippingDetailsSuite">
        <classes>
            <class name="Tests.TC10_ShippingDetailsTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/ShoppingCartSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="ShoppingCartSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="ShoppingCartSuite">
        <classes>
            <class name="Tests.TC09_ShoppingCartTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/SpeakersSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="SpeakersSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="SpeakersSuite">
        <classes>
            <class name="Tests.TC06_SpeakersTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: Test Runner/TabletsSuite.xml
============================================================
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="TabletsSuite">
    <listeners>
        <listener class-name="Listeners.ITestListenersClass"/>
        <listener class-name="Listeners.IInvokedListenersClass"/>
    </listeners>
    <test name="TabletsSuite">
        <classes>
            <class name="Tests.TC05_TabletsTest"/>
        </classes>
    </test>
</suite>

============================================================
FILE: pages_tree.txt
============================================================
Pages/
├── P01_LogInPage.java
│   ├── clickOnUserMenu
│   ├── sendUserName
│   ├── sendPassword
│   └── signInButtonClick
├── P02_HomePage.java
│   ├── clickOnPopularItem1
│   ├── clickOnPopularItem2
│   ├── clickOnPopularItem3
│   ├── selectCategoryListBoxContactUs
│   ├── selectProductListBoxContactUs
│   ├── sendEmailContactUs
│   ├── sendSubjectTextareaContactUs
│   ├── clickOnContactUsSendButton
│   ├── clickOnContinueShoppingButton
│   ├── clickOngoUpIcon
│   ├── clickOnHomeLogo
│   ├── clickOnShoppingCart
│   ├── clickOnUserMenu
│   ├── clickOnSearchIcon
│   ├── enterDataToSearchBar
│   ├── clickOnLaptopsCategory
│   ├── clickOnHeadphonesCategory
│   ├── clickOnTabletsCategory
│   ├── clickOnSpeakersCategory
│   ├── clickOnMiceCategory
│   ├── clickOnSeeOfferButton
│   ├── isSearchResultLabelDisplayedWithText
│   ├── clickOnFacebookLink
│   ├── clickOnTwitterLink
│   ├── clickOnLinkedinLink
│   ├── isFacebookLinkDisplayed
│   ├── isTwitterLinkDisplayed
│   ├── isLinkedinLinkDisplayed
│   ├── getFacebookLinkHref
│   ├── getTwitterLinkHref
│   ├── getLinkedinLinkHref
│   ├── getPageTitle
│   ├── getPageUrl
│   └── isContactUsSuccessMessageDisplayed
├── P03_LaptopsPage.java
│   ├── clickOnNewDesignBuyNowButton
│   ├── clickOnHP_Pavilion_15t
│   ├── clickOnHP_Pavilion_15z
│   ├── clickOnHP_Pavilion_15z_Touch
│   ├── clickOnHP_Spectre_x360
│   ├── clickOnHP_Stream_11
│   ├── clickOnHP_ENVY_x360
│   ├── clickOnHP_ENVY_17t
│   ├── clickOnHP_ZBook_17
│   ├── clickOnHP_Chromebook_ENERGYSTAR
│   ├── clickOnHP_Chromebook_ES
│   └── clickOnHP_Pavilion_x360_11t_Touch
├── P04_HeadphonesPage.java
│   ├── clickOnHP_H2310_In_Ear
│   ├── clickOnBose_SoundLink_Around_Ear
│   ├── clickOnLogitech_USB_Headset_H390
│   ├── clickOnBeats_Studio_2_OverEar
│   └── clickOn_FEEL_YOUR_MUSIC_BuyNowButton
├── P05_TabletsPage.java
│   ├── clickOnHP_ElitePad_1000
│   ├── clickOnHP_Elite_x2_1011
│   ├── clickOnHP_Pro_Tablet_608
│   └── clickOnTravelConfidentlyBuyNowButton
├── P06_SpeakersPage.java
│   ├── clickOnEnjoyPremiumSoundBuyNowButton
│   ├── clickOnBoseSoundlinkBluetoothSpeaker
│   ├── clickOnBoseSoundLinkWirelessSpeaker
│   ├── clickOnHPRoarMiniWirelessSpeaker
│   ├── clickOnHPRoarPlusWirelessSpeaker
│   ├── clickOnHPRoarWirelessSpeaker
│   ├── clickOnHPS9500BluetoothWirelessSpeaker
│   └── clickOnLogitechX100SpeakerSystem
├── P07_MicePage.java
│   ├── clickOnDiscoverOurWirelessMiceBuyNowButton
│   ├── clickOnKensington_Orbit_72352_Trackball
│   ├── clickOnHP_Z3600_Wireless_Mouse
│   ├── clickOnHP_Z3200_Wireless_Mouse
│   ├── clickOnHP_USB_3_Button_OpticalMouse
│   ├── clickOnHP_Z4000_Wireless_Mouse
│   ├── clickOnLogitech_G502_Proteus_Core
│   ├── clickOnKensington_Orbit_72337_Trackball
│   ├── clickOnHP_Z8000_Bluetooth_Mouse
│   ├── clickOnMicrosoft_Sculpt_Touch_Mouse
│   └── clickOnSillyMeerkat
├── P08_ProductSpecificationsPage.java
│   ├── clickOnLaptopsPageBack
│   ├── clickOnHeadphonesPageBack
│   ├── clickOnTabletsPageBack
│   ├── clickOnSpeakersPageBack
│   ├── clickOnMicePageBack
│   ├── getProductTitle
│   ├── getProductPrice
│   ├── isProductTitleEqualTo
│   ├── isProductPriceEqualTo
│   ├── clickFirstColorRadioButton
│   ├── clickSecondColorRadioButton
│   ├── clickThirdColorRadioButton
│   ├── isFirstColorSelected
│   ├── isSecondColorSelected
│   ├── isThirdColorSelected
│   ├── clickOnAddQuantityButton
│   ├── clickOnSubtractQuantityButton
│   ├── isQuantityInputFieldEqualTo
│   ├── getQuantityNumber
│   ├── setProductQuantity
│   ├── clickOnAddToCartButton
│   └── clickOnShoppingCart
├── P09_ShoppingCartPage.java
│   ├── getShoppingCartIsEmptyLabelText
│   ├── isShoppingCartIsEmptyLabelDisplayed
│   ├── clickOnCheckOutButton
│   ├── clickOnContinueShoppingButton
│   ├── clickOnProductRemoveButton_P1
│   ├── clickOnProductRemoveButton_P2
│   ├── clickOnProductRemoveButton_P3
│   ├── clickOnProductRemoveButton_P4
│   ├── clickOnProductEditButton_P1
│   ├── clickOnProductEditButton_P2
│   ├── clickOnProductEditButton_P3
│   └── clickOnProductEditButton_P4
├── P10_ShippingDetailsPage.java
│   ├── clickOnFirstNextButtonInShippingDetails
│   ├── clickOnSecondNextButtonInEditShippingDetails
│   ├── isPaymentMethodSectionSelected
│   ├── isShippingDetailsSectionSelected
│   ├── clickOnEditShippingDetailsLink
│   ├── clickOnBackButton
│   ├── clickOnSaveChangesCheckBox
│   ├── editFirstName
│   ├── editLastName
│   ├── editPhoneNumber
│   ├── selectCountry
│   ├── editCity
│   ├── editAddress
│   ├── editPostalCode
│   └── editState
├── P11_PaymentMethodsPage.java
│   ├── clickOnBackToShippingDetailsLink
│   ├── clickOnPaymentMethodsSafePay
│   ├── sendSafePayUserName
│   ├── sendSafePayPassword
│   ├── clickOnSaveChangesCheckBox_SafePay
│   ├── clickOnPayNowButton_SAFEPAY
│   ├── clickOnPaymentMethods_MasterCredit
│   ├── clickOnPaymentMethodsMasterCredit_EditButton
│   ├── sendMasterCreditCardNumber
│   ├── sendMasterCreditCVVNumber
│   ├── sendMasterCreditCardHolderName
│   ├── clickOnSaveChangesCheckBox_MasterCredit
│   └── clickOnPayNowButton_MasterCredit
└── P12_OrderSummaryPage.java
    ├── isOrderSummaryPageDisplayed
    └── getOrderSummaryTitle


============================================================
FILE: pom.xml
============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>AdvantageOnlineShopping-AutomationProject</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <seleniumVersion>4.34.0</seleniumVersion>
        <testNGVersion>7.11.0</testNGVersion>
        <slf4jVersion>2.0.17</slf4jVersion>
        <slf4jVersionAPI>2.0.17</slf4jVersionAPI>
        <log4jVersion>2.25.0</log4jVersion>
        <GsonVersion>2.13.1</GsonVersion>
        <javafakerVersion>1.0.2</javafakerVersion>
        <shutterBugVersion>1.6</shutterBugVersion>
        <aspectj.version>1.9.22</aspectj.version>
        <allureVersion>2.29.0</allureVersion>
        <allure-commandlineVersion>2.29.0</allure-commandlineVersion>
        <allureApi.version>2.34.1</allureApi.version>
        <allureMavenVersion>2.12.0</allureMavenVersion>

        <suite.Headphones>Test Runner/HeadphonesSuite.xml</suite.Headphones>
        <suite.Home>Test Runner/HomeSuite.xml</suite.Home>
        <suite.Laptops>Test Runner/LaptopsSuite.xml</suite.Laptops>
        <suite.LogIn>Test Runner/LogInSuite.xml</suite.LogIn>
        <suite.Mices>Test Runner/MicesSuite.xml</suite.Mices>
        <suite.OrderSummary>Test Runner/OrderSummarySuite.xml</suite.OrderSummary>
        <suite.PaymentMethods>Test Runner/PaymentMethodsSuite.xml</suite.PaymentMethods>
        <suite.ProductSpecifications>Test Runner/ProductSpecificationsSuite.xml</suite.ProductSpecifications>
        <suite.Regression>Test Runner/RegressionSuite.xml</suite.Regression>
        <suite.ShippingDetails>Test Runner/ShippingDetailsSuite.xml</suite.ShippingDetails>
        <suite.ShoppingCart>Test Runner/ShoppingCartSuite.xml</suite.ShoppingCart>
        <suite.Speakers>Test Runner/SpeakersSuite.xml</suite.Speakers>
        <suite.Tablets>Test Runner/TabletsSuite.xml</suite.Tablets>
    </properties>



    <dependencies>
        <!-- https://mvnrepository.com/artifact/io.qameta.allure/allure-plugin-api -->
        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-plugin-api</artifactId>
            <version>${allureApi.version}</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj.version}</version>
        </dependency>
        <dependency>
            <groupId>com.assertthat</groupId>
            <artifactId>selenium-shutterbug</artifactId>
            <version>${shutterBugVersion}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.seleniumhq.selenium</groupId>
                    <artifactId>selenium-java</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${seleniumVersion}</version>
        </dependency>

        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>5.8.0</version>
        </dependency>

        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testNGVersion}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4jVersion}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4jVersionAPI}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4jVersion}</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${GsonVersion}</version>
        </dependency>

        <dependency>
            <groupId>com.github.javafaker</groupId>
            <artifactId>javafaker</artifactId>
            <version>${javafakerVersion}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.qameta.allure/allure-commandline -->
        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-commandline</artifactId>
            <version>${allure-commandlineVersion}</version>
        </dependency>

        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-testng</artifactId>
            <version>${allureVersion}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${aspectj.version}</version>
            <scope>runtime</scope>
        </dependency>
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjtools</artifactId>
                <version>${aspectj.version}</version>
            </dependency>
    </dependencies>

    <build>
        <directory>Test-outputs/target</directory>
        <plugins>
            <plugin>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-maven</artifactId>
                <version>${allureMavenVersion}</version>
                <configuration>
                    <reportVersion>${allureVersion}</reportVersion>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.5.3</version>
                <configuration>
                    <suiteXmlFiles>
                        <suiteXmlFile>${suite.OrderSummary}</suiteXmlFile>
                    </suiteXmlFiles>
                </configuration>
            </plugin>
            <plugin>
                <groupId>dev.aspectj</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>1.14.1</version>
                <configuration>
                    <complianceLevel>21</complianceLevel>
                    <source>21</source>
                    <target>21</target>
                    <showWeaveInfo>true</showWeaveInfo>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <version>${aspectj.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>regressionProfile</id>
            <build>
                <directory>Test-outputs/target</directory>
                <plugins>
                    <plugin>
                        <groupId>io.qameta.allure</groupId>
                        <artifactId>allure-maven</artifactId>
                        <configuration>
                            <reportVersion>${allureVersion}</reportVersion>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <source>${maven.compiler.source}</source>
                            <target>${maven.compiler.target}</target>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <suiteXmlFiles>
                                <suiteXmlFile>${suite.Regression}</suiteXmlFile>
                            </suiteXmlFiles>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>dev.aspectj</groupId>
                        <artifactId>aspectj-maven-plugin</artifactId>
                        <configuration>
                            <complianceLevel>21</complianceLevel>
                            <source>21</source>
                            <target>21</target>
                            <showWeaveInfo>true</showWeaveInfo>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>compile</goal>
                                    <goal>test-compile</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>End2EndScenarioProfile</id>
            <build>
                <directory>Test-outputs/target</directory>
                <plugins>
                    <plugin>
                        <groupId>io.qameta.allure</groupId>
                        <artifactId>allure-maven</artifactId>
                        <configuration>
                            <reportVersion>${allureVersion}</reportVersion>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <source>${maven.compiler.source}</source>
                            <target>${maven.compiler.target}</target>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <suiteXmlFiles>
                                <suiteXmlFile>${suite.OrderSummary}</suiteXmlFile>
                            </suiteXmlFiles>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>dev.aspectj</groupId>
                        <artifactId>aspectj-maven-plugin</artifactId>
                        <configuration>
                            <complianceLevel>21</complianceLevel>
                            <source>21</source>
                            <target>21</target>
                            <showWeaveInfo>true</showWeaveInfo>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>compile</goal>
                                    <goal>test-compile</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>

============================================================
FILE: test_tree.txt
============================================================
Tests/
├── TC01_LogInTest.java
│   └── validLogInTC
├── TC02_HomeTest.java
│   ├── checkShoppingCartButton
│   ├── checkSearchBarAndSearchIcon
│   ├── checkLaptopsCategoryLink
│   ├── checkSpeakersCategoryLink
│   ├── checkTabletsCategoryLink
│   ├── checkHeadphonesCategoryLink
│   ├── checkMiceCategoryLink
│   ├── checkSeeOfferButton
│   ├── checkPopularItemsSectionFirstItem
│   ├── checkPopularItemsSectionSecondItem
│   ├── checkPopularItemsSectionThirdItem
│   ├── checkContactUsSection
│   ├── checkGoUpIconAndContinueShoppingButton
│   └── checkFooterSocialLinks
├── TC03_LaptopsTest.java
│   ├── navigateToLaptopsCategory
│   ├── exploreTheNewDesignSection
│   ├── laptop_HP_Chromebook_14G1_EnergyStar_TC
│   ├── laptop_HP_Chromebook_14G1_ES_TC
│   ├── laptop_HP_ENVY_17T_Touch_TC
│   ├── laptop_HP_ENVY_X360_15T_TC
│   ├── laptop_HP_Pavilion_15T_Touch_TC
│   ├── laptop_HP_Pavilion_15Z_TC
│   ├── laptop_HP_Pavilion_15Z_Touch_TC
│   ├── laptop_HP_Pavilion_X360_11T_Touch_TC
│   ├── laptop_HP_Spectre_X360_13_4102DX_TC
│   ├── laptop_HP_Stream_11_D020NR_TC
│   └── laptop_HP_ZBook_17_G2_Mobile_Workstation_TC
├── TC04_HeadphonesTest.java
│   ├── chooseProductFromHeadphonesCategoryTC
│   ├── exploreFeelYourMusicSection
│   ├── headphones_Beats_Studio2_OverEar_TC
│   ├── headphones_Bose_SoundLink_AroundEar_TC
│   ├── headphones_HP_H2310_InEar_TC
│   └── headphones_Logitech_USB_Headset_H390_TC
├── TC05_TabletsTest.java
│   ├── exploreTravelConfidentlyAndInStyleSection
│   ├── tablets_HP_ElitePad_1000_TC
│   ├── tablets_HP_Elite_x2_1011_TC
│   └── tablets_HP_Pro_Tablet_608_TC
├── TC06_SpeakersTest.java
│   ├── exploreEnjoyPremiumSoundSection
│   ├── speakers_BoseSoundlinkBluetoothSpeaker_TC
│   ├── speakers_BoseSoundLinkWirelessSpeaker_TC
│   ├── speakers_HPRoarMiniWirelessSpeaker_TC
│   ├── speakers_HPRoarPlusWirelessSpeaker_TC
│   ├── speakers_HPRoarWirelessSpeaker_TC
│   ├── speakers_HPS9500BluetoothWirelessSpeaker_TC
│   └── speakers_LogitechX100SpeakerSystem_TC
├── TC07_MiceTest.java
│   ├── exploreDiscoverOurWirelessMiceSection
│   ├── mice_HP_USB_3_Button_OpticalMouse_TC
│   ├── mice_HP_Z3200_Wireless_Mouse_TC
│   ├── mice_HP_Z3600_Wireless_Mouse_TC
│   ├── mice_HP_Z4000_Wireless_Mouse_TC
│   ├── mice_HP_Z8000_Bluetooth_Mouse_TC
│   ├── mice_Kensington_Orbit_72352_Trackball_TC
│   ├── mice_Kensington_Orbit_72337_Trackball_TC
│   ├── mice_Logitech_G502_Proteus_Core_TC
│   ├── mice_Microsoft_Sculpt_Touch_Mouse_TC
│   └── mice_silly_meerkat_TC
├── TC08_ProductSpecificationsTest.java
│   ├── navigateToProductSpecificationsPage
│   ├── verifyProductTitle
│   ├── verifyProductPrice
│   ├── verifyColorRadioButtons
│   ├── verifyIncrementQuantity
│   ├── verifyMunisQuantity
│   ├── verifyQuantityInputField
│   └── verifyAddToCartButton
├── TC09_ShoppingCartTest.java
│   ├── shoppingCartIsEmpty
│   ├── verifyContinueShoppingButton
│   ├── verifyEditButton
│   ├── verifyRemoveButton
│   └── verifyCheckoutButton
├── TC10_ShippingDetailsTest.java
│   ├── verifyNextButtonInOrderPaymentPage
│   ├── verifyShippingDetailsSectionSelected
│   ├── verifyEditShippingDetailsLink
│   ├── verifyBackButtonFunctionality
│   └── verifyEditShippingDetailsFunctionality
├── TC11_PaymentMethodsTest.java
│   ├── verifyBackToShippingDetailsLink
│   ├── verifySafePayPaymentMethod
│   └── verifyMasterCreditPaymentMethod
└── TC12_OrderSummaryTest.java
    └── verifyEndToEndScenario